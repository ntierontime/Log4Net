<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinqToLdap</name>
    </assembly>
    <members>
        <member name="T:LinqToLdap.Collections.DirectoryAttributes">
            <summary>
            Allows you to get or set values for an entry.
            </summary>
        </member>
        <member name="T:LinqToLdap.Collections.IDirectoryAttributes">
            <summary>
            Allows you to get or set values for an entry.
            </summary>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetValue(System.String)">
            <summary>
            Gets the data for the attribute, if available, without regard for performance.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Get(System.String)">
            <summary>
            Gets the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute"/> if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetBytes(System.String)">
            <summary>
            Gets the byte array value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetStrings(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> array value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetString(System.String)">
            <summary>
            Gets the string value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetByte(System.String)">
            <summary>
            Gets the <see cref="T:System.Byte"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if the value cannot be 
            </exception>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetInt(System.String)">
            <summary>
            Gets the <see cref="T:System.Int32"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetLong(System.String)">
            <summary>
            Gets the <see cref="T:System.Int64"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetDouble(System.String)">
            <summary>
            Gets the <see cref="T:System.Double"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetDecimal(System.String)">
            <summary>
            Gets the <see cref="T:System.Decimal"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetShort(System.String)">
            <summary>
            Gets the <see cref="T:System.Int16"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetFloat(System.String)">
            <summary>
            Gets the <see cref="T:System.Single"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetBoolean(System.String)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetDateTime(System.String,System.String)">
            <summary>
            Gets the <see cref="T:System.DateTime"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <param name="format">The format of the DateTime.  Use null for file time</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetDateTime(System.String)">
            <summary>
            Gets the <see cref="T:System.DateTime"/> value for the specified attribute if available.
            Uses the default format yyyyMMddHHmmss.0Z.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetByteArrays(System.String)">
            <summary>
            Gets the list of <see cref="T:System.Byte"/> array values for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetGuid(System.String)">
            <summary>
            Gets the <see cref="T:System.Guid"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetX509Certificate(System.String)">
            <summary>
            Gets the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetX509Certificate2(System.String)">
            <summary>
            Gets the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetX509Certificates(System.String)">
            <summary>
            Gets the list of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetX509Certificate2s(System.String)">
            <summary>
            Gets the list of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetSecurityIdentifier(System.String)">
            <summary>
            Gets the <see cref="T:System.Security.Principal.SecurityIdentifier"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Byte[])">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.String)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Byte)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Int16)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Int32)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Int64)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Single)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Double)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Decimal)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.DateTime,System.String)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
            <param name="format">The format of the <paramref name="value"/>.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Boolean)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate})">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.Set(System.String,System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.SetNull(System.String)">
            <summary>
            Sets the value of the attribute to "not set".
            </summary>
            <param name="attribute">The name of the attribute.</param>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.GetChangedAttributes">
             <summary>
             Returns any added, removed, or updated attributes and the value.
             </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.IDirectoryAttributes.AddModification(System.DirectoryServices.Protocols.DirectoryAttributeModification)">
            <summary>
            Add a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification"/> for the entry.
            </summary>
            <param name="modification">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification"/> for the entry.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="modification"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the modification is for "distinguishedname", "cn", "ou", or "entrydn".  
            Also thrown <paramref name="modification"/> does not have a valid name.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if a modification with the same name and operation has already been added.</exception>
        </member>
        <member name="P:LinqToLdap.Collections.IDirectoryAttributes.DistinguishedName">
            <summary>
            Gets the Distinguished Name
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.IDirectoryAttributes.Entry">
            <summary>
            The <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry"/> returned by the directory.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if an attempt is made to access the Entry when this instance was not create from a <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry"/>.</exception>
        </member>
        <member name="P:LinqToLdap.Collections.IDirectoryAttributes.AttributeNames">
            <summary>
            All of the attributes pressent for the entry.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.IDirectoryAttributes.Item(System.String)">
            <summary>
            Gets the data for the attribute, if available, without regard for performance.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.#ctor(System.DirectoryServices.Protocols.SearchResultEntry)">
            <summary>
            Instantiates this class with a reference to <paramref name="entry"/>.
            </summary>
            <param name="entry">The <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry"/> to wrap.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Instantiates this class without a reference to a <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry"/>.  
            It can be used to set attributes for the directory.
            </summary>
            <param name="distinguishedName">
            The distinguished name for the entry.
            </param>
            <param name="attributes">
            The attributes for the entry that will be treated as changed attributes.  Attributes named distinguishedname and entrydn are ignored.
            </param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.AddModification(System.DirectoryServices.Protocols.DirectoryAttributeModification)">
            <summary>
            Add a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification"/> for the entry.
            </summary>
            <param name="modification">The <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification"/> for the entry.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="modification"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the modification is for "distinguishedname" or "entrydn".  
            Also thrown <paramref name="modification"/> does not have a valid name.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if a modification with the same name and operation has already been added.</exception>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Get(System.String)">
            <summary>
            Gets the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute"/> if available.
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetValue(System.String)">
            <summary>
            Gets the data for the attribute, if available, without regard for performance.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetBytes(System.String)">
            <summary>
            Gets the byte array value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetX509Certificate2(System.String)">
            <summary>
            Gets the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetX509Certificate(System.String)">
            <summary>
            Gets the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetStrings(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> array value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetString(System.String)">
            <summary>
            Gets the string value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetInt(System.String)">
            <summary>
            Gets the <see cref="T:System.Int32"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetLong(System.String)">
            <summary>
            Gets the <see cref="T:System.Int64"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetDouble(System.String)">
            <summary>
            Gets the <see cref="T:System.Double"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetDecimal(System.String)">
            <summary>
            Gets the <see cref="T:System.Decimal"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetShort(System.String)">
            <summary>
            Gets the <see cref="T:System.Int16"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetByte(System.String)">
            <summary>
            Gets the <see cref="T:System.Byte"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if the value cannot be 
            </exception>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetFloat(System.String)">
            <summary>
            Gets the <see cref="T:System.Single"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetBoolean(System.String)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetDateTime(System.String,System.String)">
            <summary>
            Gets the <see cref="T:System.DateTime"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <param name="format">The format of the DateTime.  Use null for file time</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetDateTime(System.String)">
            <summary>
            Gets the <see cref="T:System.DateTime"/> value for the specified attribute if available.
            Uses the default format yyyyMMddHHmmss.0Z.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetByteArrays(System.String)">
            <summary>
            Gets the list of <see cref="T:System.Byte"/> array values for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetX509Certificate2s(System.String)">
            <summary>
            Gets the list of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> values for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetX509Certificates(System.String)">
            <summary>
            Gets the list of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> values for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetGuid(System.String)">
            <summary>
            Gets the <see cref="T:System.Guid"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetSecurityIdentifier(System.String)">
            <summary>
            Gets the <see cref="T:System.Security.Principal.SecurityIdentifier"/> value for the specified attribute if available.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Byte[])">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate})">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.String)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Byte)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Int16)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Int32)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Int64)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Single)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Double)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Decimal)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.DateTime,System.String)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
            <param name="format">The format of the <paramref name="value"/>.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Boolean)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.Set(System.String,System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="attribute">The name of the attribute.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.SetNull(System.String)">
            <summary>
            Sets the value of the attribute to "not set".
            </summary>
            <param name="attribute">The name of the attribute.</param>
        </member>
        <member name="M:LinqToLdap.Collections.DirectoryAttributes.GetChangedAttributes">
             <summary>
             Returns any added, removed, or updated attributes and the value.
             </summary>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.Collections.DirectoryAttributes.AttributeNames">
            <summary>
            All of the attributes pressent for the entry.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.DirectoryAttributes.DistinguishedName">
            <summary>
            Gets the Distinguished Name
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.DirectoryAttributes.Entry">
            <summary>
            The <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry"/> returned by the directory.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if an attempt is made to access the Entry when this instance was not create from a <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry"/>.</exception>
        </member>
        <member name="P:LinqToLdap.Collections.DirectoryAttributes.Item(System.String)">
            <summary>
            Gets the data for the attribute, if available, without regard for performance.
            </summary>
            <param name="attribute">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Collections.ILdapPage`1">
            <summary>
            Represents a page of items
            </summary>
            <typeparam name="T">The type of items</typeparam>
        </member>
        <member name="P:LinqToLdap.Collections.ILdapPage`1.Count">
            <summary>
            The actual number of items in the page.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.ILdapPage`1.PageSize">
            <summary>
            The size of the page.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.ILdapPage`1.HasNextPage">
            <summary>
            Indicates if there is another page.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.ILdapPage`1.NextPage">
            <summary>
            The cookie for the next page.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.ILdapPage`1.Filter">
            <summary>
            The LDAP Filter used to produce this page.
            </summary>
        </member>
        <member name="T:LinqToLdap.Collections.LdapPage`1">
            <summary>
            Represents a page of items
            </summary>
            <typeparam name="T">The type of items</typeparam>
        </member>
        <member name="M:LinqToLdap.Collections.LdapPage`1.#ctor(System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
            Creates a a paged collection.
            </summary>
            <param name="pageSize">The size of the page</param>
            <param name="nextPage">The cookie for the next page</param>
            <param name="enumerable">The items for the page</param>
            <param name="filter">Filter used to produce this page</param>
        </member>
        <member name="M:LinqToLdap.Collections.LdapPage`1.#ctor(System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a a paged collection.
            </summary>
            <param name="pageSize">The size of the page</param>
            <param name="nextPage">The cookie for the next page</param>
            <param name="page">The items for the page</param>
        </member>
        <member name="P:LinqToLdap.Collections.LdapPage`1.PageSize">
            <summary>
            The size of the page.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.LdapPage`1.HasNextPage">
            <summary>
            Indicates if there is another page.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.LdapPage`1.NextPage">
            <summary>
            The cookie for the next page.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.LdapPage`1.Filter">
            <summary>
            The LDAP Filter used to produce this page.
            </summary>
        </member>
        <member name="T:LinqToLdap.Collections.OriginalValuesCollection">
            <summary>
            Represents a collection 
            </summary>
        </member>
        <member name="M:LinqToLdap.Collections.OriginalValuesCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LinqToLdap.Collections.OriginalValuesCollection.#ctor(System.Collections.Generic.IList{LinqToLdap.Collections.SerializableKeyValuePair{System.String,System.Object}})">
            <summary>
            Constructor that takes list of values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="P:LinqToLdap.Collections.OriginalValuesCollection.Item(System.String)">
            <summary>
            Case insensitive key accessor for the value.
            </summary>
            <param name="key">The property name</param>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Collections.SerializableKeyValuePair`2">
            <summary>
            A serializable class implementation based on <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
        </member>
        <member name="M:LinqToLdap.Collections.SerializableKeyValuePair`2.#ctor">
            <summary>
            Default parameterless constructor.
            </summary>
        </member>
        <member name="M:LinqToLdap.Collections.SerializableKeyValuePair`2.#ctor(`0,`1)">
            <summary>
            Default constructor with initial values.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.SerializableKeyValuePair`2.Key">
            <summary>
            Key property.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.SerializableKeyValuePair`2.Value">
            <summary>
            Value property.
            </summary>
        </member>
        <member name="T:LinqToLdap.EventListeners.IEventListener">
            <summary>
            Interface for events available for subscription notifications.
            </summary>
        </member>
        <member name="T:LinqToLdap.EventListeners.IUpdateEventListener">
            <summary>
            Interface for update events.
            </summary>
        </member>
        <member name="T:LinqToLdap.EventListeners.IAddEventListener">
            <summary>
            Interface for add events.
            </summary>
        </member>
        <member name="T:LinqToLdap.EventListeners.IDeleteEventListener">
            <summary>
            Interface for delete events.
            </summary>
        </member>
        <member name="T:LinqToLdap.EventListeners.IPreEventListener`2">
            <summary>
            Interface for events available for subscription notifications.
            </summary>
            <typeparam name="TObject">The instance for the event.</typeparam>
            <typeparam name="TRequest">The partially populated request to be sent to the directory.</typeparam>
        </member>
        <member name="M:LinqToLdap.EventListeners.IPreEventListener`2.Notify(LinqToLdap.EventListeners.ListenerPreArgs{`0,`1})">
            <summary>
            Executes when the event is raised.
            </summary>
            <param name="preArgs">The arguments.</param>
        </member>
        <member name="T:LinqToLdap.EventListeners.IPostEventListener`3">
            <summary>
            Interface for events available for subscription notifications.
            </summary>
            <typeparam name="TObject">The instance for the event.</typeparam>
            /// <typeparam name="TRequest">The request sent to the directory</typeparam>
            <typeparam name="TResponse">The response from the directory.</typeparam>
        </member>
        <member name="M:LinqToLdap.EventListeners.IPostEventListener`3.Notify(LinqToLdap.EventListeners.ListenerPostArgs{`0,`1,`2})">
            <summary>
            Executes when the event is raised.
            </summary>
            <param name="preArgs">The arguments.</param>
        </member>
        <member name="T:LinqToLdap.EventListeners.IPostAddEventListener">
            <summary>
            The event raised after an add occurs.
            </summary>
        </member>
        <member name="T:LinqToLdap.EventListeners.IPostDeleteEventListener">
            <summary>
            The event raised after a delete occurs.
            </summary>
        </member>
        <member name="T:LinqToLdap.EventListeners.IPostUpdateEventListener">
            <summary>
            The event raised after an update occurs.
            </summary>
        </member>
        <member name="T:LinqToLdap.EventListeners.IPreAddEventListener">
            <summary>
            The event raised before an add occurs.
            </summary>
        </member>
        <member name="T:LinqToLdap.EventListeners.IPreDeleteEventListener">
            <summary>
            The event raised before a delete occurs.
            </summary>
        </member>
        <member name="T:LinqToLdap.EventListeners.IPreUpdateEventListener">
            <summary>
            The event raised before an update occurs.
            </summary>
        </member>
        <member name="T:LinqToLdap.EventListeners.ListenerPostArgs`3">
            <summary>
            Arguments passed for <see cref="T:LinqToLdap.EventListeners.IEventListener"/>s. The arguments used by this class are <see cref="T:System.WeakReference"/>s.
            </summary>
            <typeparam name="TObject">The instance for the event.</typeparam>
            <typeparam name="TResponse">The response from the Directory.</typeparam>
            <typeparam name="TRequest">The full request that was sent to the server.</typeparam>
        </member>
        <member name="P:LinqToLdap.EventListeners.ListenerPostArgs`3.Entry">
            <summary>
            The entry.
            </summary>
        </member>
        <member name="P:LinqToLdap.EventListeners.ListenerPostArgs`3.Request">
            <summary>
            The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest"/>.
            </summary>
        </member>
        <member name="P:LinqToLdap.EventListeners.ListenerPostArgs`3.Response">
            <summary>
            The <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse"/>.
            </summary>
        </member>
        <member name="P:LinqToLdap.EventListeners.ListenerPostArgs`3.Connection">
            <summary>
            The connection that will be used when sending the <see cref="P:LinqToLdap.EventListeners.ListenerPostArgs`3.Request"/>.
            </summary>
        </member>
        <member name="T:LinqToLdap.EventListeners.ListenerPreArgs`2">
            <summary>
            Arguments passed for <see cref="T:LinqToLdap.EventListeners.IEventListener"/>s. The arguments used by this class are <see cref="T:System.WeakReference"/>s.
            </summary>
            <typeparam name="TObject">The instance for the event.</typeparam>
            <typeparam name="TRequest">The partially populated request to be sent to the directory.</typeparam>
        </member>
        <member name="P:LinqToLdap.EventListeners.ListenerPreArgs`2.Entry">
            <summary>
            The entry.
            </summary>
            
        </member>
        <member name="P:LinqToLdap.EventListeners.ListenerPreArgs`2.Request">
            <summary>
            The <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest"/>.
            </summary>
        </member>
        <member name="P:LinqToLdap.EventListeners.ListenerPreArgs`2.Connection">
            <summary>
            The connection that will be used when sending the <see cref="P:LinqToLdap.EventListeners.ListenerPreArgs`2.Request"/>.
            </summary>
        </member>
        <member name="T:LinqToLdap.Helpers.TypeSystem">
            <summary>
            Pulled from http://msdn.microsoft.com/en-us/library/bb546158.aspx
            </summary>
        </member>
        <member name="T:LinqToLdap.ILdapConfiguration">
            <summary>
            Interface for accessing configuration information for connecting, querying, and updating a LDAP server.
            </summary>
        </member>
        <member name="M:LinqToLdap.ILdapConfiguration.CreateContext">
             <summary>
             Creates a <see cref="T:LinqToLdap.DirectoryContext"/> from the configuration.
             </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ILdapConfiguration.GetListeners``1">
            <summary>
            Get all event listeners of type <typeparamref name="TListener"/> registered with this configuration.
            </summary>
            <typeparam name="TListener">The type of listeners to retrieve.</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ILdapConfiguration.GetListeners">
            <summary>
            Get all event listeners registered with this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.ILdapConfiguration.ConnectionFactory">
            <summary>
            The configured connection factory to be used for all 
            <see cref="T:LinqToLdap.DirectoryContext"/>s that don't explicitly get an <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/>.
            </summary>
        </member>
        <member name="P:LinqToLdap.ILdapConfiguration.Log">
            <summary>
            Used for writing <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest"/> and <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse"/> information to a log.
            </summary>
        </member>
        <member name="P:LinqToLdap.ILdapConfiguration.ServerMaxPageSize">
            <summary>
            Get the server max page size.
            </summary>
        </member>
        <member name="P:LinqToLdap.ILdapConfiguration.PagingEnabled">
            <summary>
            Indicates if paging is enabled.
            </summary>
        </member>
        <member name="P:LinqToLdap.ILdapConfiguration.Mapper">
            <summary>
            Class responsible for mapping objects to directory entries.
            </summary>
        </member>
        <member name="T:LinqToLdap.IPooledLdapConnectionFactory">
            <summary>
            Interface for constructing <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/>s and managing them in a pool.
            </summary>
        </member>
        <member name="T:LinqToLdap.ILdapConnectionFactory">
            <summary>
            Interface for constructing <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/>s
            </summary>
        </member>
        <member name="M:LinqToLdap.ILdapConnectionFactory.GetConnection">
            <summary>
            Builds a <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/> based on a fluent configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ILdapConnectionFactory.ReleaseConnection(System.DirectoryServices.Protocols.LdapConnection)">
            <summary>
            Releases a <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledLdapConnectionFactory.Reinitialize">
            <summary>
            Reinitializes the pool.
            </summary>
        </member>
        <member name="T:LinqToLdap.LdapConnectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/> to simplify directory operations.
            </summary>
        </member>
        <member name="M:LinqToLdap.LdapConnectionExtensions.Query(System.DirectoryServices.Protocols.LdapConnection,System.String,System.DirectoryServices.Protocols.SearchScope,LinqToLdap.Logging.ILinqToLdapLogger,System.Int32,System.Boolean)">
            <summary>
            Creates a directory query from the <paramref name="connection"/>.
            </summary>
            <param name="connection">The connection to the directory.</param>
            <param name="namingContext">The location of the query.</param>
            <param name="scope">The scope of the query. Defaults to <see cref="F:System.DirectoryServices.Protocols.SearchScope.Subtree"/>.</param>
            <param name="log">The log for query information. Defaults to null.</param>
            <param name="maxPageSize">The max page size for the directory. Defaults to 500.</param>
            <param name="withPaging">Indicates if paging should be used. Defaults to true.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="connection"/> is null or <paramref name="namingContext"/> is null, empty, or white space.</exception>
            <returns></returns>
            <example>
            using (var connection = new LdapConnection("localhost"))
            {
                List{IDirectoryAttributes} users = connection.AsQueryable("DC=example,DC=com")
                    .Where(da =&gt; Filter.Equal(da, "", ""))
            }
            </example>
        </member>
        <member name="M:LinqToLdap.LdapConnectionExtensions.Add(System.DirectoryServices.Protocols.LdapConnection,LinqToLdap.Collections.IDirectoryAttributes,LinqToLdap.Logging.ILinqToLdapLogger,System.DirectoryServices.Protocols.DirectoryControl[],System.Collections.Generic.IEnumerable{LinqToLdap.EventListeners.IAddEventListener})">
            <summary>
            Adds the entry to the directory.
            </summary>
            <param name="connection">The connection to the directory.</param>
            <param name="entry">The entry to add.</param>
            <param name="log">The log for query information. Defaults to null.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <param name="listeners">The event listeners to be notified.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="connection"/> or <paramref name="entry"/>&gt; is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.LdapConnectionExtensions.AddAndGet(System.DirectoryServices.Protocols.LdapConnection,LinqToLdap.Collections.IDirectoryAttributes,LinqToLdap.Logging.ILinqToLdapLogger,System.DirectoryServices.Protocols.DirectoryControl[],System.Collections.Generic.IEnumerable{LinqToLdap.EventListeners.IAddEventListener})">
            <summary>
            Adds the entry to the directory and returns the newly saved entry from the directory.
            </summary>
            <param name="connection">The connection to the directory.</param>
            <param name="entry">The entry to add.</param>
            <param name="log">The log for query information. Defaults to null.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <param name="listeners">The event listeners to be notified.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="connection"/> or <paramref name="entry"/>&gt; is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.LdapConnectionExtensions.Delete(System.DirectoryServices.Protocols.LdapConnection,System.String,LinqToLdap.Logging.ILinqToLdapLogger,System.DirectoryServices.Protocols.DirectoryControl[],System.Collections.Generic.IEnumerable{LinqToLdap.EventListeners.IDeleteEventListener})">
            <summary>
            Deletes an entry from the directory.
            </summary>
            <param name="connection">The connection to the directory.</param>
            <param name="distinguishedName">The distinguished name of the entry
            </param><param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <param name="log">The log for query information. Defaults to null.</param>
            <param name="listeners">The event listeners to be notified.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="distinguishedName"/> is null, empty or white space.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.LdapConnectionExtensions.Update(System.DirectoryServices.Protocols.LdapConnection,LinqToLdap.Collections.IDirectoryAttributes,LinqToLdap.Logging.ILinqToLdapLogger,System.DirectoryServices.Protocols.DirectoryControl[],System.Collections.Generic.IEnumerable{LinqToLdap.EventListeners.IUpdateEventListener})">
            <summary>
            Updates the entry in the directory.
            </summary>
            <param name="connection">The connection to the directory.</param>
            <param name="entry">The entry to update.</param>
            <param name="log">The log for query information. Defaults to null.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <param name="listeners">The event listeners to be notified.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
        </member>
        <member name="M:LinqToLdap.LdapConnectionExtensions.UpdateAndGet(System.DirectoryServices.Protocols.LdapConnection,LinqToLdap.Collections.IDirectoryAttributes,LinqToLdap.Logging.ILinqToLdapLogger,System.DirectoryServices.Protocols.DirectoryControl[],System.Collections.Generic.IEnumerable{LinqToLdap.EventListeners.IUpdateEventListener})">
            <summary>
            Updates the entry in the directory and returns the updated version from the directory.
            </summary>
            <param name="connection">The connection to the directory.</param>
            <param name="entry">The entry to update.</param>
            <param name="log">The log for query information. Defaults to null.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <param name="listeners">The event listeners to be notified.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
        </member>
        <member name="M:LinqToLdap.LdapConnectionExtensions.ListServerAttributes(System.DirectoryServices.Protocols.LdapConnection,System.String[],LinqToLdap.Logging.ILinqToLdapLogger)">
            <summary>
            List server information from RootDSE.
            </summary>
            <param name="connection">The connection to the directory.</param>
            <param name="log">The log for query information. Defaults to null.</param>
            <param name="attributes">
            Specify specific attributes to load.  Some LDAP servers require an explicit request for certain attributes.
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConnectionExtensions.GetByDN(System.DirectoryServices.Protocols.LdapConnection,System.String,LinqToLdap.Logging.ILinqToLdapLogger,System.String[])">
            <summary>
            Retrieves the attributes from the directory using the distinguished name.  <see cref="F:System.DirectoryServices.Protocols.SearchScope.Base"/> is used.
            </summary>
            <param name="connection">The connection to the directory.</param>
            <param name="log">The log for query information. Defaults to null.</param>
            <param name="distinguishedName">The distinguished name to look for.</param>
            <param name="attributes">The attributes to load.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConnectionExtensions.MoveEntry(System.DirectoryServices.Protocols.LdapConnection,System.String,System.String,LinqToLdap.Logging.ILinqToLdapLogger,System.Nullable{System.Boolean},System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Moves the entry from one container to another without modifying the entry's name.
            </summary>
            <param name="connection">The connection to the directory.</param>
            <param name="log">The log for query information. Defaults to null.</param>
            <param name="currentDistinguishedName">The entry's current distinguished name</param>
            <param name="newNamingContext">The new container for the entry</param>
            <param name="deleteOldRDN">Maps to <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.DeleteOldRdn"/>. Defaults to null to use default behavior</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="currentDistinguishedName"/> has an invalid format.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="currentDistinguishedName"/>
            or <paramref name="newNamingContext"/> are null, empty or white space.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapConnection">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.LdapConnectionExtensions.RenameEntry(System.DirectoryServices.Protocols.LdapConnection,System.String,System.String,LinqToLdap.Logging.ILinqToLdapLogger,System.Nullable{System.Boolean},System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Renames the entry within the same container. The <paramref name="newName"/> can be in the format
            XX=New Name or just New Name.
            </summary>
            <param name="connection">The connection to the directory.</param>
            <param name="log">The log for query information. Defaults to null.</param>
            <param name="currentDistinguishedName">The entry's current distinguished name</param>
            <param name="newName">The new name of the entry</param>
            <param name="deleteOldRDN">Maps to <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.DeleteOldRdn"/>. Defaults to null to use default behavior</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="currentDistinguishedName"/> has an invalid format.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="currentDistinguishedName"/>
            or <paramref name="newName"/> are null, empty or white space.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapConnection">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.LdapConnectionExtensions.RetrieveRanges``1(System.DirectoryServices.Protocols.LdapConnection,System.String,System.String,System.Int32,LinqToLdap.Logging.ILinqToLdapLogger)">
            <summary>
            Uses range retrieval to get all values for <paramref name="attributeName"/> on <paramref name="distinguishedName"/>.
            </summary>
            <typeparam name="TValue">The type of the attribute.  Must be <see cref="T:System.String"/> or <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>.</typeparam>
            <param name="connection">The connection to the directory.</param>
            <param name="log">The log for query information. Defaults to null.</param>
            <param name="distinguishedName">The distinguished name of the entry.</param>
            <param name="attributeName">The attribute to load.</param>
            <param name="start">The starting point for the range. Defaults to 0.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="distinguishedName"/> or <paramref name="attributeName"/> is null, empty or white space.
            </exception>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.LdapConnectionFactory">
            <summary>
            Class for creating <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/>s using a fluent configuration.
            </summary>
        </member>
        <member name="T:LinqToLdap.ConnectionFactoryBase">
            <summary>
            Base class for connection factories.
            </summary>
        </member>
        <member name="F:LinqToLdap.ConnectionFactoryBase.DefaultPort">
            <summary>
            Default LDAP port 389
            </summary>
        </member>
        <member name="F:LinqToLdap.ConnectionFactoryBase.SslPort">
            <summary>
            Default LDAP SSL port 636
            </summary>
        </member>
        <member name="F:LinqToLdap.ConnectionFactoryBase.GlobalCatalogPort">
            <summary>
            Default Active Directory port 3268
            </summary>
        </member>
        <member name="F:LinqToLdap.ConnectionFactoryBase.GlobalCatalogSslPort">
            <summary>
            Default Active Directory port 3269
            </summary>
        </member>
        <member name="F:LinqToLdap.ConnectionFactoryBase.DefaultProtocolVersion">
            <summary>
            Default LDAP protocol version 3
            </summary>
        </member>
        <member name="M:LinqToLdap.ConnectionFactoryBase.#ctor(System.String)">
            <summary>
            Sets the server name and port if one was specified as part of the server name.
            </summary>
            <param name="serverName"></param>
        </member>
        <member name="M:LinqToLdap.ConnectionFactoryBase.BuildConnection">
            <summary>
            Constructs a connection from the fluent configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.ConnectionFactoryBase.UsesSsl">
            <summary>
            Indicates if the connection uses SSL.  Will automatically set the port to 636.
            </summary>
        </member>
        <member name="P:LinqToLdap.ConnectionFactoryBase.Credentials">
            <summary>
            Credentials for the connection
            </summary>
        </member>
        <member name="P:LinqToLdap.ConnectionFactoryBase.LdapProtocolVersion">
            <summary>
            LDAP protocol version
            </summary>
        </member>
        <member name="P:LinqToLdap.ConnectionFactoryBase.IsConnectionless">
            <summary>
            If the connection should use UDP
            </summary>
        </member>
        <member name="P:LinqToLdap.ConnectionFactoryBase.AuthType">
            <summary>
            <see cref="P:LinqToLdap.ConnectionFactoryBase.AuthType"/> for the connection.
            </summary>
        </member>
        <member name="P:LinqToLdap.ConnectionFactoryBase.Timeout">
            <summary>
            Timeout period for the connection.
            </summary>
        </member>
        <member name="P:LinqToLdap.ConnectionFactoryBase.FullyQualifiedDnsHostName">
            <summary>
            If this option is called, the server name is a fully-qualified DNS host name. 
            Otherwise the server name can be an IP address, a DNS domain or host name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.ConnectionFactoryBase.Port">
            <summary>
            Port for the connection
            </summary>
        </member>
        <member name="P:LinqToLdap.ConnectionFactoryBase.ServerName">
            <summary>
            Name of the server
            </summary>
        </member>
        <member name="P:LinqToLdap.ConnectionFactoryBase.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
        </member>
        <member name="T:LinqToLdap.ILdapConnectionFactoryConfiguration">
            <summary>
            Interface for configuring a <see cref="T:LinqToLdap.ILdapConnectionFactory"/>.
            </summary>
        </member>
        <member name="M:LinqToLdap.ILdapConnectionFactoryConfiguration.AuthenticateBy(System.DirectoryServices.Protocols.AuthType)">
            <summary>
            Allows you to specify an authentication method for the 
            connection.  If this method is not called,  the authentication method 
            will be resolved by the <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/>.
            </summary>
            <param name="authType">
            The type of authentication to use.
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ILdapConnectionFactoryConfiguration.AuthenticateAs(System.Net.NetworkCredential)">
            <summary>
            Allows you to specify credentials for the connection to use.  
            If this method is not called,  then the <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/> 
            will use the credentials of the current user.
            </summary>
            <param name="credentials">
            The credentials to use.
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ILdapConnectionFactoryConfiguration.ProtocolVersion(System.Int32)">
            <summary>
            Specifies the LDAP protocol version.  The default is 3.
            </summary>
            <param name="version">The protocol version</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ILdapConnectionFactoryConfiguration.UsePort(System.Int32)">
            <summary>
            Sets the port manually for the LDAP server.  The default is 389.
            </summary>
            <param name="port">
            The port to use when communicating with the LDAP server.
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ILdapConnectionFactoryConfiguration.ConnectionTimeoutIn(System.Double)">
            <summary>
            Sets the connection timeout period in seconds.  The default is 30 seconds.
            </summary>
            <param name="seconds">The timeout period</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="seconds"/> is less than or equal to 0</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ILdapConnectionFactoryConfiguration.UseSsl(System.Int32)">
            <summary>
            Tuorns on SSL and optionally you can set the SSL port.  Default is 636.
            </summary>
            <param name="port">The optional port to use.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ILdapConnectionFactoryConfiguration.ServerNameIsFullyQualified">
            <summary>
            If this option is called, the server name is a fully-qualified DNS host name. 
            Otherwise the server name can be an IP address, a DNS domain or host name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ILdapConnectionFactoryConfiguration.UseUdp">
            <summary>
            Indicates that the connections will use UDP (User Datagram Protocol).
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConnectionFactory.#ctor(System.String)">
            <summary>
            Allows for building an <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/> via a fluent interface.
            </summary>
            <param name="serverName">The name of the server as 'servername' or 'servername:port'</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="serverName"/> is null, empty, or white-space</exception>
        </member>
        <member name="M:LinqToLdap.LdapConnectionFactory.ProtocolVersion(System.Int32)">
            <summary>
            Specifies the LDAP protocol version.  The default is 3.
            </summary>
            <param name="version">The protocol version</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConnectionFactory.UsePort(System.Int32)">
            <summary>
            Sets the port manually for the LDAP server.  The default is 389.
            </summary>
            <param name="port">
            The port to use when communicating with the LDAP server.
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConnectionFactory.ConnectionTimeoutIn(System.Double)">
            <summary>
            Sets the connection timeout period in seconds.  The default is 30 seconds.
            </summary>
            <param name="seconds">The timeout period</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="seconds"/> is less than or equal to 0</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConnectionFactory.UseSsl(System.Int32)">
            <summary>
            Sets the port to the default SSL port for the LDAP server.  The default is 636.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConnectionFactory.ServerNameIsFullyQualified">
            <summary>
            If this option is called, the server name is a fully-qualified DNS host name. 
            Otherwise the server name can be an IP address, a DNS domain or host name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConnectionFactory.UseUdp">
            <summary>
            Indicates that the connections will use UDP (User Datagram Protocol).
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConnectionFactory.AuthenticateBy(System.DirectoryServices.Protocols.AuthType)">
            <summary>
            Allows you to specify an authentication method for the 
            connection.  If this method is not called,  the authentication method 
            will be resolved by the <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/>.
            </summary>
            <param name="authType">
            The type of authentication to use.
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConnectionFactory.AuthenticateAs(System.Net.NetworkCredential)">
            <summary>
            Allows you to specify credentials for the connection to use.  
            If this method is not called,  then the <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/> 
            will use the credentials of the current user.
            </summary>
            <param name="credentials">
            The credentials to use.
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConnectionFactory.ReleaseConnection(System.DirectoryServices.Protocols.LdapConnection)">
            <summary>
            Releases a <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConnectionFactory.GetConnection">
            <summary>
            Builds a <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/> based on a fluent configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.DirectoryContext">
            <summary>
            Implementation for performing LINQ queries against a directory
            </summary>
        </member>
        <member name="T:LinqToLdap.IDirectoryContext">
            <summary>
             Interface for performing LINQ queries against a directory
            </summary>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.GetByDN``1(System.String)">
            <summary>
            Retrieves the mapped class from the directory using the distinguished name.  <see cref="F:System.DirectoryServices.Protocols.SearchScope.Base"/> is used.
            </summary>
            <param name="distinguishedName">The distinguished name to look for.</param>
            <typeparam name="T">The type of mapped object</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.GetByDN(System.String,System.String[])">
            <summary>
            Retrieves the attributes from the directory using the distinguished name.  <see cref="F:System.DirectoryServices.Protocols.SearchScope.Base"/> is used.
            </summary>
            <param name="distinguishedName">The distinguished name to look for.</param>
            <param name="attributes">The attributes to load.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Query(System.String,System.DirectoryServices.Protocols.SearchScope,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a query against the directory for a directory entries.
            </summary>
            <param name="namingContext">The place in the directory from which you want to start your search.</param>
            <param name="scope">Determines the depth at which the search is performed</param>
            <param name="objectClass">The object class in the directory for the type.</param>
            <param name="objectClasses">The object classes in the directory for the type.</param>
            <param name="objectCategory">The object category in the directory for the type</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Query``1(System.DirectoryServices.Protocols.SearchScope,System.String)">
            <summary>
            Creates a query against the directory.
            </summary>
            <typeparam name="T">Directory type</typeparam>
            <param name="scope">Determines the depth at which the search is performed</param>
            <param name="namingContext">Optional naming context to override the mapped naming context.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Query``1(``0,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a query against the directory.
            </summary>
            <typeparam name="T">Directory type</typeparam>
            <param name="example">An anonymous object that can be used for auto mapping.</param>
            <param name="namingContext">The place in the directory from which you want to start your search.</param>
            <param name="objectClass">The object class in the directory for the type.</param>
            <param name="objectClasses">The object classes in the directory for the type.</param>
            <param name="objectCategory">The object category in the directory for the type</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Query``1(``0,System.DirectoryServices.Protocols.SearchScope,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a query against the directory.
            </summary>
            <typeparam name="T">Directory type</typeparam>
            <param name="scope">Determines the depth at which the search is performed</param>
            <param name="example">An anonymous object that can be used for auto mapping.</param>
            <param name="namingContext">The place in the directory from which you want to start your search.</param>
            <param name="objectClass">The object class in the directory for the type.</param>
            <param name="objectClasses">The object classes in the directory for the type.</param>
            <param name="objectCategory">The object category in the directory for the type</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.ListServerAttributes(System.String[])">
            <summary>
            List server information from RootDSE.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.AddAndGet``1(``0,System.String,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the entry to the directory and returns the newly saved entry from the directory. If the <paramref name="distinguishedName"/> is
            null then a mapped distinguished name property is used.
            </summary>
            <typeparam name="T">The type of entry.</typeparam>
            <param name="entry">The object to save.</param>
            <param name="distinguishedName">The distinguished name for the entry.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if entry is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if distinguished name is null and there is no mapped distinguished name property.</exception>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if <paramref name="distinguishedName"/> is null and Distinguished Name is not mapped.  
            Thrown if object class or object category have not been mapped.
            Thrown if <typeparamref name="T"/> has not been mapped.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the add was not successful.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.AddAndGet(LinqToLdap.Collections.IDirectoryAttributes,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the entry to the directory and returns the newly saved entry from the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.AddAndGet(LinqToLdap.Collections.IDirectoryAttributes)">
            <summary>
            Adds the entry to the directory and returns the newly saved entry from the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.AddAndGet(LinqToLdap.Collections.DirectoryAttributes,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the entry to the directory and returns the newly saved entry from the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.AddAndGet(LinqToLdap.Collections.DirectoryAttributes)">
            <summary>
            Adds the entry to the directory and returns the newly saved entry from the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Add``1(``0,System.String,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the entry to the directory. If the <paramref name="distinguishedName"/> is
            null then a mapped distinguished name property is used.
            </summary>
            <typeparam name="T">The type of entry.</typeparam>
            <param name="entry">The object to save.</param>
            <param name="distinguishedName">The distinguished name for the entry.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if entry is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if distinguished name is null and there is no mapped distinguished name property.</exception>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if <paramref name="distinguishedName"/> is null and Distinguished Name is not mapped.  
            Thrown if object class or object category have not been mapped.
            Thrown if <typeparamref name="T"/> has not been mapped.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the add was not successful.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Add(LinqToLdap.Collections.IDirectoryAttributes,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the entry to the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Add(LinqToLdap.Collections.IDirectoryAttributes)">
            <summary>
            Adds the entry to the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Add(LinqToLdap.Collections.DirectoryAttributes,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the entry to the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Add(LinqToLdap.Collections.DirectoryAttributes)">
            <summary>
            Adds the entry to the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Delete(System.String,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Deletes an entry from the directory.
            </summary>
            <param name="distinguishedName">The distinguished name of the entry</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="distinguishedName"/> is null, empty or white space.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.UpdateAndGet``1(``0,System.String,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Updates the entry in the directory and returns the updated version from the directory. If the <paramref name="distinguishedName"/> is
            null then a mapped distinguished name property is used.
            </summary>
            <param name="entry">The entry to update</param>
            <param name="distinguishedName">The distinguished name for the entry.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <typeparam name="T">The type of entry.</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if entry is null</exception>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if <paramref name="distinguishedName"/> is null and Distinguished Name is not mapped.  
            Thrown if <typeparamref name="T"/> has not been mapped.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if distinguished name is null and there is no mapped distinguished name property.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation is not successful</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation is not successful</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.UpdateAndGet(LinqToLdap.Collections.IDirectoryAttributes)">
            <summary>
            Updates the entry in the directory and returns the updated version from the directory.
            </summary>
            <param name="entry">The attributes for the entry.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.UpdateAndGet(LinqToLdap.Collections.DirectoryAttributes)">
            <summary>
            Updates the entry in the directory and returns the updated version from the directory.
            </summary>
            <param name="entry">The attributes for the entry.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.UpdateAndGet(LinqToLdap.Collections.IDirectoryAttributes,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Updates the entry in the directory and returns the updated version from the directory.
            </summary>
            <param name="entry">The attributes for the entry.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Update``1(``0,System.String,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Updates the entry in the directory. If the <paramref name="distinguishedName"/> is
            null then a mapped distinguished name property is used.
            </summary>
            <param name="entry">The entry to update</param>
            <param name="distinguishedName">The distinguished name for the entry.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <typeparam name="T">The type of entry.</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if entry is null</exception>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if <paramref name="distinguishedName"/> is null and Distinguished Name is not mapped.  
            Thrown if object class or object category have not been mapped.
            Thrown if <typeparamref name="T"/> has not been mapped.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if distinguished name is null and there is no mapped distinguished name property.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="entry"/> is <see cref="T:LinqToLdap.Mapping.DirectoryObjectBase"/> but the entry is not tracking changes.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation is not successful</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation is not successful</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Update(LinqToLdap.Collections.IDirectoryAttributes)">
            <summary>
            Updates the entry in the directory.
            </summary>
            <param name="entry">The attributes for the entry.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Update(LinqToLdap.Collections.DirectoryAttributes)">
            <summary>
            Updates the entry in the directory.
            </summary>
            <param name="entry">The attributes for the entry.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.Update(LinqToLdap.Collections.IDirectoryAttributes,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Updates the entry in the directory.
            </summary>
            <param name="entry">The attributes for the entry.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.AddAttribute(System.String,System.String,System.Object,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the attribute to an entry.
            </summary>
            <param name="distinguishedName">The entry</param>
            <param name="attributeName">The name of the attribute</param>
            <param name="value">The value for the entry.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapConnection">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.DeleteAttribute(System.String,System.String,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Removes the attribute from an entry.
            </summary>
            <param name="distinguishedName">The entry</param>
            <param name="attributeName">The name of the attribute</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="distinguishedName"/> or <paramref name="attributeName"/> is null, empty or white space.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapConnection">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.MoveEntry(System.String,System.String,System.Nullable{System.Boolean},System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Moves the entry from one container to another without modifying the entry's name and return's the new distinguished name.
            </summary>
            <param name="currentDistinguishedName">The entry's current distinguished name</param>
            <param name="newNamingContext">The new container for the entry</param>
            <param name="deleteOldRDN">Maps to <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.DeleteOldRdn"/>. Defaults to null to use default behavior from <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.DeleteOldRdn"/>.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="currentDistinguishedName"/> has an invalid format.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="currentDistinguishedName"/>
            or <paramref name="newNamingContext"/> are null, empty or white space.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapConnection">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.RenameEntry(System.String,System.String,System.Nullable{System.Boolean},System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Renames the entry within the same container and return's the new distinguished name. The <paramref name="newName"/> should be in the format
            XX=New Name.
            </summary>
            <param name="currentDistinguishedName">The entry's current distinguished name</param>
            <param name="newName">The new name of the entry</param>
            <param name="deleteOldRDN">Maps to <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.DeleteOldRdn"/>. Defaults to null to use default behavior from <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.DeleteOldRdn"/>.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="currentDistinguishedName"/> has an invalid format.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="currentDistinguishedName"/>
            or <paramref name="newName"/> are null, empty or white space.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapConnection">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.RetrieveRanges``1(System.String,System.String,System.Int32)">
            <summary>
            Uses range retrieval to get all values for <paramref name="attributeName"/> on <paramref name="distinguishedName"/>.
            </summary>
            <typeparam name="TValue">The type of the attribute.  Must be <see cref="T:System.String"/> or <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>.</typeparam>
            <param name="distinguishedName">The distinguished name of the entry.</param>
            <param name="attributeName">The attribute to load.</param>
            <param name="start">The starting point for the range. Defaults to 0.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="distinguishedName"/> or <paramref name="attributeName"/> is null, empty or white space.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IDirectoryContext.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)">
            <summary>
            Sends the request to the directory.
            </summary>
            <param name="request">The response from the directory</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.#ctor(System.DirectoryServices.Protocols.LdapConnection,System.Boolean,LinqToLdap.ILdapConfiguration)">
            <summary>
            Creates an instance and uses the specified <paramref name="connection"/> for querying.  
            The connection will not be disposed of when this instance is disposed.
            </summary>
            <param name="connection">Connection to use</param>
            <param name="disposeOfConnection">Indicates if the context should dispose of the connection when <see cref="M:LinqToLdap.DirectoryContext.Dispose"/> is called.</param>
            <param name="configuration">The configuration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="connection"/> is null</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.#ctor(LinqToLdap.ILdapConfiguration)">
            <summary>
            Creates an instance for querying.
            The underlying connection will be disposed of when this instance is disposed if the <see cref="T:LinqToLdap.LdapConfiguration"/> doeas not
            have a configured <see cref="T:LinqToLdap.ILdapConnectionFactory"/>.  Otherwise <see cref="M:LinqToLdap.ILdapConnectionFactory.ReleaseConnection(System.DirectoryServices.Protocols.LdapConnection)"/> will be called.
            </summary>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if <paramref name="configuration"/> or <see cref="P:LinqToLdap.ILdapConfiguration.ConnectionFactory"/> is null.
            </exception>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.#ctor">
            <summary>
            Creates an instance for querying.
            The underlying connection will be disposed of when this instance is disposed if the <see cref="T:LinqToLdap.LdapConfiguration"/> doeas not
            have a configured <see cref="T:LinqToLdap.ILdapConnectionFactory"/>.  Otherwise <see cref="M:LinqToLdap.ILdapConnectionFactory.ReleaseConnection(System.DirectoryServices.Protocols.LdapConnection)"/> will be called.
            </summary>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">Thrown if <see cref="T:LinqToLdap.LdapConfiguration"/> has not been initialized.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Query``1(System.DirectoryServices.Protocols.SearchScope,System.String)">
            <summary>
            Creates a query against the directory.
            </summary>
            <typeparam name="T">Directory type</typeparam>
            <param name="scope">Determines the depth at which the search is performed</param>
            <param name="namingContext">Optional naming context to override the mapped naming context.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Query``1(``0,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a query against the directory.
            </summary>
            <typeparam name="T">Directory type</typeparam>
            <param name="example">An anonymous object that can be used for auto mapping.</param>
            <param name="namingContext">The place in the directory from which you want to start your search.</param>
            <param name="objectClass">The object class in the directory for the type.</param>
            <param name="objectClasses">The object classes in the directory for the type.</param>
            <param name="objectCategory">The object category in the directory for the type</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Query``1(``0,System.DirectoryServices.Protocols.SearchScope,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a query against the directory.
            </summary>
            <typeparam name="T">Directory type</typeparam>
            <param name="scope">Determines the depth at which the search is performed</param>
            <param name="example">An anonymous object that can be used for auto mapping.</param>
            <param name="namingContext">The place in the directory from which you want to start your search.</param>
            <param name="objectClass">The object class in the directory for the type.</param>
            <param name="objectClasses">The object classes in the directory for the type.</param>
            <param name="objectCategory">The object category in the directory for the type</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Query(System.String,System.DirectoryServices.Protocols.SearchScope,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a query against the directory for a dynamic type.
            </summary>
            <param name="namingContext">The place in the directory from which you want to start your search.</param>
            <param name="scope">Determines the depth at which the search is performed</param>
            <param name="objectClass">The object class in the directory for the type.</param>
            <param name="objectClasses">The object classes in the directory for the type.</param>
            <param name="objectCategory">The object category in the directory for the type</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.ListServerAttributes(System.String[])">
            <summary>
            List server information from RootDSE.
            </summary>
            <param name="attributes">
            Specify specific attributes to load.  Some LDAP servers require an explicit request for certain attributes.
            </param>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.GetByDN(System.String,System.String[])">
            <summary>
            Retrieves the attributes from the directory using the distinguished name.  <see cref="F:System.DirectoryServices.Protocols.SearchScope.Base"/> is used.
            </summary>
            <param name="distinguishedName">The distinguished name to look for.</param>
            <param name="attributes">The attributes to load.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.GetByDN``1(System.String)">
            <summary>
            Retrieves the mapped class from the directory using the distinguished name.  <see cref="F:System.DirectoryServices.Protocols.SearchScope.Base"/> is used.
            </summary>
            <param name="distinguishedName">The distinguished name to look for.</param>
            <typeparam name="T">The type of mapped object</typeparam>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.AddAndGet``1(``0,System.String,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the entry to the directory and returns the newly saved entry from the directory. If the <paramref name="distinguishedName"/> is
            null then a mapped distinguished name property is used.
            </summary>
            <typeparam name="T">The type of entry.</typeparam>
            <param name="entry">The object to save</param>
            <param name="distinguishedName">The distinguished name for the entry.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if entry is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if distinguished name is null and there is no mapped distinguished name property.</exception>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if <paramref name="distinguishedName"/> is null and Distinguished Name is not mapped.  
            Thrown if object class or object category have not been mapped.
            Thrown if <typeparamref name="T"/> has not been mapped.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Add``1(``0,System.String,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the entry to the directory. If the <paramref name="distinguishedName"/> is
            null then a mapped distinguished name property is used.
            </summary>
            <typeparam name="T">The type of entry.</typeparam>
            <param name="entry">The object to save.</param>
            <param name="distinguishedName">The distinguished name for the entry.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if entry is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if distinguished name is null and there is no mapped distinguished name property.</exception>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if <paramref name="distinguishedName"/> is null and Distinguished Name is not mapped.  
            Thrown if object class or object category have not been mapped.
            Thrown if <typeparamref name="T"/> has not been mapped.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Add(LinqToLdap.Collections.IDirectoryAttributes)">
            <summary>
            Adds the entry to the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Add(LinqToLdap.Collections.IDirectoryAttributes,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the entry to the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Add(LinqToLdap.Collections.DirectoryAttributes)">
            <summary>
            Adds the entry to the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Add(LinqToLdap.Collections.DirectoryAttributes,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the entry to the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.AddAndGet(LinqToLdap.Collections.IDirectoryAttributes)">
            <summary>
            Adds the entry to the directory and returns the newly saved entry from the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.AddAndGet(LinqToLdap.Collections.IDirectoryAttributes,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the entry to the directory and returns the newly saved entry from the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.AddAndGet(LinqToLdap.Collections.DirectoryAttributes)">
            <summary>
            Adds the entry to the directory and returns the newly saved entry from the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.AddAndGet(LinqToLdap.Collections.DirectoryAttributes,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the entry to the directory and returns the newly saved entry from the directory.
            </summary>
            <param name="entry">The attributes for the entry</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the add was not successful.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Delete(System.String,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Deletes an entry from the directory.
            </summary>
            <param name="distinguishedName">The distinguished name of the entry</param><param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="distinguishedName"/> is null, empty or white space.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Update``1(``0,System.String,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Updates the entry in the directory. If the <paramref name="distinguishedName"/> is
            null then a mapped distinguished name property is used.
            </summary>
            <param name="entry">The entry to update</param>
            <param name="distinguishedName">The distinguished name for the entry.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <typeparam name="T">The type of entry.</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if entry is null</exception>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if <paramref name="distinguishedName"/> is null and Distinguished Name is not mapped.  
            Thrown if object class or object category have not been mapped.
            Thrown if <typeparamref name="T"/> has not been mapped.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if distinguished name is null and there is no mapped distinguished name property.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="entry"/> is <see cref="T:LinqToLdap.Mapping.DirectoryObjectBase"/> but the entry is not tracking changes.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation is not successful</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation is not successful</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.UpdateAndGet``1(``0,System.String,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Updates the entry in the directory and returns the updated version from the directory. If the <paramref name="distinguishedName"/> is
            null then a mapped distinguished name property is used.
            </summary>
            <param name="entry">The entry to update</param>
            <param name="distinguishedName">The distinguished name for the entry.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <typeparam name="T">The type of entry.</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if entry is null</exception>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if <paramref name="distinguishedName"/> is null and Distinguished Name is not mapped.  
            Thrown if <typeparamref name="T"/> has not been mapped.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if distinguished name is null and there is no mapped distinguished name property.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation is not successful</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation is not successful</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.UpdateAndGet(LinqToLdap.Collections.IDirectoryAttributes)">
            <summary>
            Updates the entry in the directory and returns the updated version from the directory.
            </summary>
            <param name="entry">The attributes for the entry.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.UpdateAndGet(LinqToLdap.Collections.DirectoryAttributes)">
            <summary>
            Updates the entry in the directory and returns the updated version from the directory.
            </summary>
            <param name="entry">The attributes for the entry.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.UpdateAndGet(LinqToLdap.Collections.IDirectoryAttributes,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Updates the entry in the directory and returns the updated version from the directory.
            </summary>
            <param name="entry">The entry to update.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Update(LinqToLdap.Collections.IDirectoryAttributes)">
            <summary>
            Updates the entry in the directory.
            </summary>
            <param name="entry">The attributes for the entry.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Update(LinqToLdap.Collections.DirectoryAttributes)">
            <summary>
            Updates the entry in the directory.
            </summary>
            <param name="entry">The attributes for the entry.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Update(LinqToLdap.Collections.IDirectoryAttributes,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Updates the entry in the directory.
            </summary>
            <param name="entry">The entry to update.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entry"/> is null.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapException">Thrown if the operation fails</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.AddAttribute(System.String,System.String,System.Object,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Adds the attribute to an entry.
            </summary>
            <param name="distinguishedName">The entry</param>
            <param name="attributeName">The name of the attribute</param>
            <param name="value">The value for the entry.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapConnection">Thrown if the operation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.DeleteAttribute(System.String,System.String,System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Removes the attribute from an entry.
            </summary>
            <param name="distinguishedName">The entry</param>
            <param name="attributeName">The name of the attribute</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="distinguishedName"/> is null, empty or white space.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapConnection">Thrown if the operation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.MoveEntry(System.String,System.String,System.Nullable{System.Boolean},System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Moves the entry from one container to another without modifying the entry's name.
            </summary>
            <param name="currentDistinguishedName">The entry's current distinguished name</param>
            <param name="newNamingContext">The new container for the entry</param>
            <param name="deleteOldRDN">Maps to <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.DeleteOldRdn"/>. Defaults to null to use default behavior from <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.DeleteOldRdn"/>.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="currentDistinguishedName"/> has an invalid format.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="currentDistinguishedName"/>
            or <paramref name="newNamingContext"/> are null, empty or white space.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapConnection">Thrown if the operation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.RenameEntry(System.String,System.String,System.Nullable{System.Boolean},System.DirectoryServices.Protocols.DirectoryControl[])">
            <summary>
            Renames the entry within the same container. The <paramref name="newName"/> can be in the format
            XX=New Name or just New Name.
            </summary>
            <param name="currentDistinguishedName">The entry's current distinguished name</param>
            <param name="newName">The new name of the entry</param>
            <param name="deleteOldRDN">Maps to <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.DeleteOldRdn"/>. Defaults to null to use default behavior from <see cref="P:System.DirectoryServices.Protocols.ModifyDNRequest.DeleteOldRdn"/>.</param>
            <param name="controls">Any <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to be sent with the request</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="currentDistinguishedName"/> has an invalid format.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="currentDistinguishedName"/>
            or <paramref name="newName"/> are null, empty or white space.
            </exception>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Thrown if the operation fails.</exception>
            <exception cref="T:System.DirectoryServices.Protocols.LdapConnection">Thrown if the operation fails.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.RetrieveRanges``1(System.String,System.String,System.Int32)">
            <summary>
            Uses range retrieval to get all values for <paramref name="attributeName"/> on <paramref name="distinguishedName"/>.
            </summary>
            <typeparam name="TValue">The type of the attribute.  Must be <see cref="T:System.String"/> or <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>.</typeparam>
            <param name="distinguishedName">The distinguished name of the entry.</param>
            <param name="attributeName">The attribute to load.</param>
            <param name="start">The starting point for the range. Defaults to 0.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="distinguishedName"/> or <paramref name="attributeName"/> is null, empty or white space.
            </exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has been disposed.</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.SendRequest(System.DirectoryServices.Protocols.DirectoryRequest)">
            <summary>
            Sends the request to the directory.
            </summary>
            <param name="request">The response from the directory</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Finalize">
            <summary>
            Finalizer that disposes of this class.
            </summary>
        </member>
        <member name="M:LinqToLdap.DirectoryContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:LinqToLdap.DirectoryContext.Logger">
            <summary>
            Allows for logging filters and errors.
            </summary>
        </member>
        <member name="P:LinqToLdap.DirectoryContext.Log">
            <summary>
            Allows for logging filters and errors.
            </summary>
        </member>
        <member name="M:LinqToLdap.DirectoryQuery`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:LinqToLdap.DirectoryQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:LinqToLdap.DirectoryQuery`1.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="P:LinqToLdap.DirectoryQuery`1.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
            </returns>
        </member>
        <member name="P:LinqToLdap.DirectoryQuery`1.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <returns>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </returns>
        </member>
        <member name="M:LinqToLdap.QueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable"/> object that can evaluate the query represented by a specified expression tree.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that can evaluate the query represented by the specified expression tree.
            </returns>
            <param name="expression">An expression tree that represents a LINQ query.
            </param>
        </member>
        <member name="M:LinqToLdap.QueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable`1"/> object that can evaluate the query represented by a specified expression tree.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> that can evaluate the query represented by the specified expression tree.
            </returns>
            <param name="expression">An expression tree that represents a LINQ query.
            </param>
            <typeparam name="TElement">The type of the elements of the <see cref="T:System.Linq.IQueryable`1"/> that is returned.
            </typeparam>
        </member>
        <member name="M:LinqToLdap.QueryProvider.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <returns>
            The value that results from executing the specified query.
            </returns>
            <param name="expression">An expression tree that represents a LINQ query.
            </param>
        </member>
        <member name="M:LinqToLdap.QueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the strongly-typed query represented by a specified expression tree.
            </summary>
            <returns>
            The value that results from executing the specified query.
            </returns>
            <param name="expression">An expression tree that represents a LINQ query.
            </param>
            <typeparam name="TResult">The type of the value that results from executing the query.
            </typeparam>
        </member>
        <member name="M:LinqToLdap.DirectoryQueryProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:LinqToLdap.Exceptions.FilterException">
            <summary>
            Exception to indicate that something went wrong with filter creation.
            </summary>
        </member>
        <member name="T:LinqToLdap.ExtensionMethods">
            <summary>
             Class containing useful extension methods.
            </summary>
        </member>
        <member name="M:LinqToLdap.ExtensionMethods.ToStringOctet(System.Guid)">
            <summary>
            Converts a <see cref="T:System.Guid"/> to a string octect.
            </summary>
            <param name="guid">Original <see cref="T:System.Guid"/></param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ExtensionMethods.ToStringOctet(System.Byte[])">
            <summary>
            Converts a <see cref="T:System.Guid"/> to a string octect.
            </summary>
            <param name="bytes">Original <see cref="T:System.Byte"/> array</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ExtensionMethods.FormatLdapDateTime(System.DateTime,System.String)">
            <summary>
            Convets a date time to a string..
            </summary>
            <param name="dateTime">The original date</param>
            <param name="format">The format of the date</param>
            <example>
            yyyyMMddHHmmss.0Z
            </example>
            <exception cref="T:System.FormatException">
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ExtensionMethods.ToReadOnlyDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts a dictionary to a <see cref="T:LinqToLdap.Collections.ReadOnlyDictionary`2"/>
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="dictionary">The original dictionary</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ExtensionMethods.IsAnonymous(System.Type)">
            <summary>
            Indicates if the <paramref name="type"/> is for an anonymous type.
            </summary>
            <param name="type">The type to check</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ExtensionMethods.CleanFilterValue(System.String)">
            <summary>
            Cleans special characters for an LDAP filter.  This method cannot clean a distinguished name.
            </summary>
            <param name="value">The value to clean</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.ExtensionMethods.ToDirectoryModification(System.Object,System.String,System.DirectoryServices.Protocols.DirectoryAttributeOperation)">
            <summary>
            Attempts to convert the object from a .Net type to an LDAP string or byte[].  
            If <paramref name="obj"/> is null or <see cref="F:System.String.Empty"/> then no value is added to the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification"/>.
            </summary>
            <param name="obj">The value to convert.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="operation">The type of <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeOperation"/>.</param>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Filter">
            <summary>
            Class for specifying custom filters
            </summary>
        </member>
        <member name="M:LinqToLdap.Filter.Equal``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Creates an equals filter.
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="attributeName">The LDAP attribute name</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.Equal``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Boolean)">
            <summary>
            Creates an equals filter.
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="property">The property</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.Approximately``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Creates an approximately equal filter.
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="attributeName">The LDAP attribute name</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.Approximately``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Boolean)">
            <summary>
            Creates an approximately equal filter.
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="property">The property</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.StartsWith``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Boolean)">
            <summary>
            Creates a starts with filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="property">The property</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.StartsWith``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Creates a starts with filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="attributeName">The LDAP attribute name</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.EndsWith``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Boolean)">
            <summary>
            Creates a ends with filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="property">The property</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.EndsWith``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Creates a ends with filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="attributeName">The LDAP attribute name</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.Like``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Boolean)">
            <summary>
            Creates a like filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="property">The property</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.Like``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Creates a like filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="attributeName">The LDAP attribute name</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.GreaterThanOrEqual``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Boolean)">
            <summary>
            Creates a greater than or equal filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="property">The property</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.GreaterThanOrEqual``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Creates a greater than or equal filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="attributeName">The LDAP attribute name</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.LessThanOrEqual``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Boolean)">
            <summary>
            Creates a less than or equal filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="property">The property</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.LessThanOrEqual``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Creates a less than or equal filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="attributeName">The LDAP attribute name</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.LessThan``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Boolean)">
            <summary>
            Creates a less than filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="property">The property</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.LessThan``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Creates a less than filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="attributeName">The LDAP attribute name</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.GreaterThan``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Boolean)">
            <summary>
            Creates a greater than filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="property">The property</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.GreaterThan``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Creates a greater than filter
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="attributeName">The LDAP attribute name</param>
            <param name="attributeValue">The value by which to filter</param>
            <param name="shouldCleanValue">Indicates if <paramref name="attributeValue"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.EqualAny``1(``0,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates an equals filter.
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="attributeName">The LDAP attribute name</param>
            <param name="values">The values to filter for</param>
            <param name="shouldCleanValue">Indicates if <paramref name="values"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.EqualAny``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates an equals filter.
            </summary>
            <param name="t">Instance for expression translation</param>
            <param name="property">The property</param>
            <param name="values">The values to filter for</param>
            <param name="shouldCleanValue">Indicates if <paramref name="values"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.EqualAnything``1(``0,System.String)">
            <summary>
            Creates an equal anything filter
            </summary>
            <example>
            x=*
            </example>
            <typeparam name="T">Type for expression translation</typeparam>
            <param name="t">Instance for expression translation</param>
            <param name="attributeName">The LDAP attribute name</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.EqualAnything``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Creates an equal anything filter
            </summary>
            <example>
            x=*
            </example>
            <param name="t">Instance for expression translation</param>
            <param name="property">The property</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.MatchingRule``1(``0,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a matching rule filter
            </summary>
            <example>
            attributename:ruleOID:=value
            </example>
            <typeparam name="T">Type for expression translation</typeparam>
            <param name="t">Instance for expression translation</param>
            <param name="attributeName">The LDAP attribute name</param>
            <param name="ruleOID">The LDAP matching rule</param>
            <param name="value">The value</param>
            <param name="shouldCleanValue">Indicates if <paramref name="value"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Filter.MatchingRule``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.Boolean)">
            <summary>
            Creates a matching rule filter
            </summary>
            <example>
            attributename:ruleOID:=value
            </example>
            <param name="t">Instance for expression translation</param>
            <param name="property">The property</param>
            <param name="ruleOID">The LDAP matching rule</param>
            <param name="value">The value</param>
            <param name="shouldCleanValue">Indicates if <paramref name="value"/> should be cleaned</param>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Helpers.DnParser">
            <summary>
            Static class for parsing distinguished name information
            </summary>
        </member>
        <member name="M:LinqToLdap.Helpers.DnParser.ParseName(System.String)">
            <summary>
            Parses the first name of an entry without the RDN prefix (CN, OU, etc.) from <paramref name="distinguishedName"/> and returns that value.
            </summary>
            <param name="distinguishedName">The distinguished name to parse.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="distinguishedName"/> is null, empty, white space, or not a valid distinguished name.</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Helpers.DnParser.ParseRDN(System.String)">
            <summary>
            Parses the first RDN attribute type.
            </summary>
            <param name="distinguishedName">The distinguished name.</param>
            <example>
            OU=Test,DC=local returns OU
            </example>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="distinguishedName"/> is null, empty, white space, or has an invalid format.</exception>
        </member>
        <member name="T:LinqToLdap.IPooledConnectionFactoryConfiguration">
            <summary>
            Interface for configuring a <see cref="T:LinqToLdap.ILdapConnectionFactory"/> that supports connection pooling.
            </summary>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.AuthenticateBy(System.DirectoryServices.Protocols.AuthType)">
            <summary>
            Allows you to specify an authentication method for the 
            connection.  If this method is not called,  the authentication method 
            will be resolved by the <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/>.
            </summary>
            <param name="authType">
            The type of authentication to use.
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.AuthenticateAs(System.Net.NetworkCredential)">
            <summary>
            Allows you to specify credentials for the connection to use.  
            If this method is not called,  then the <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/> 
            will use the credentials of the current user.
            </summary>
            <param name="credentials">
            The credentials to use.
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.ProtocolVersion(System.Int32)">
            <summary>
            Specifies the LDAP protocol version.  The default is 3.
            </summary>
            <param name="version">The protocol version</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.ConnectionTimeoutIn(System.Double)">
            <summary>
            Sets the connection timeout period in seconds.  The default is 30 seconds.
            </summary>
            <param name="seconds">The timeout period</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="seconds"/> is less than or equal to 0</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.UsePort(System.Int32)">
            <summary>
            Sets the port manually for the LDAP server.  The default is 389.
            </summary>
            <param name="port">
            The port to use when communicating with the LDAP server.
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.UseSsl(System.Int32)">
            <summary>
            Enables SSL with a specific port.
            </summary>
            <param name="port">The optional port to use.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.UseSsl">
            <summary>
            Enables SSL with a default port of 636.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.ServerNameIsFullyQualified">
            <summary>
            If this option is called, the server name is a fully-qualified DNS host name. 
            Otherwise the server name can be an IP address, a DNS domain or host name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.UseUdp">
            <summary>
            Indicates that the connections will use UDP (User Datagram Protocol).
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.MaxPoolSizeIs(System.Int32)">
            <summary>
            The maximum number of connections the pool supports. An <see cref="T:System.InvalidOperationException"/> is thrown if the pool size is exceeded.
            Default is 50.
            </summary>
            <param name="size">The value</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.MinPoolSizeIs(System.Int32)">
            <summary>
            The minimum number of connections the pool will maintain. Default is 0.
            </summary>
            <param name="size">The value</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.ConnectionIdleTimeIs(System.Double)">
            <summary>
            The time in minutes before a connection is considered stale and ready for scavenging. Default is 1 minute.
            </summary>
            <param name="idleTime">The value</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.IPooledConnectionFactoryConfiguration.ScavengeIntervalIs(System.Double)">
            <summary>
            Time in milliseconds for how often the factory will try to clean up excess connections. Default is 90 seconds.
            </summary>
            <param name="interval">The value</param>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Logging.SimpleTextLogger">
            <summary>
            A simple implementation of <see cref="T:LinqToLdap.Logging.ILinqToLdapLogger"/> that writes to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="T:LinqToLdap.Logging.ILinqToLdapLogger">
            <summary>
            Interface for logging <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest"/> and <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse"/> information.
            </summary>
        </member>
        <member name="M:LinqToLdap.Logging.ILinqToLdapLogger.Trace(System.String)">
            <summary>
            Logs query information if <see cref="P:LinqToLdap.Logging.ILinqToLdapLogger.TraceEnabled"/> is true.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:LinqToLdap.Logging.ILinqToLdapLogger.Error(System.Exception,System.String)">
            <summary>
            Writes the optional message and exception to the log.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="P:LinqToLdap.Logging.ILinqToLdapLogger.TraceEnabled">
            <summary>
            Allows changing and checking if trace logging is enabled.
            </summary>
        </member>
        <member name="M:LinqToLdap.Logging.SimpleTextLogger.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a new logger from a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">The log destination</param>
        </member>
        <member name="M:LinqToLdap.Logging.SimpleTextLogger.#ctor">
            <summary>
            Creates a new logger with a <see cref="T:LinqToLdap.Logging.TraceTextWriter"/>.
            </summary>
        </member>
        <member name="M:LinqToLdap.Logging.SimpleTextLogger.Trace(System.String)">
            <summary>
            Writes the message to the trace if <see cref="P:LinqToLdap.Logging.SimpleTextLogger.TraceEnabled"/> is true.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:LinqToLdap.Logging.SimpleTextLogger.Error(System.Exception,System.String)">
            <summary>
            Writes the optional message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="P:LinqToLdap.Logging.SimpleTextLogger.TraceEnabled">
            <summary>
            Indicates if trace logging is enabled.
            </summary>
        </member>
        <member name="T:LinqToLdap.Logging.TraceTextWriter">
            <summary>
            Simple implementation of <see cref="T:System.IO.TextWriter"/> that writes to <see cref="T:System.Diagnostics.Debug"/>.
            Pulled from http://damieng.com/blog/2008/07/30/linq-to-sql-log-to-debug-window-file-memory-or-multiple-writers.
            </summary>
        </member>
        <member name="M:LinqToLdap.Logging.TraceTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Delegates writing to <see cref="M:System.Diagnostics.Debug.Write(System.String)"/>
            </summary>
            <param name="buffer">buffer</param>
            <param name="index">index</param>
            <param name="count">count</param>
        </member>
        <member name="M:LinqToLdap.Logging.TraceTextWriter.Write(System.String)">
            <summary>
            Delegates writing to <see cref="M:System.Diagnostics.Debug.Write(System.String)"/>
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Logging.TraceTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Delegates writing to <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)"/>
            </summary>
            <param name="buffer">buffer</param>
            <param name="index">index</param>
            <param name="count">count</param>
        </member>
        <member name="M:LinqToLdap.Logging.TraceTextWriter.WriteLine(System.String)">
            <summary>
            Delegates writing to <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)"/>
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:LinqToLdap.Logging.TraceTextWriter.WriteLine">
            <summary>
            Calls <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)"/> and passes <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="P:LinqToLdap.Logging.TraceTextWriter.Instance">
            <summary>
            Lazy instance of this class.
            </summary>
        </member>
        <member name="P:LinqToLdap.Logging.TraceTextWriter.Encoding">
            <summary>
            Defaults to <see cref="P:System.Text.Encoding.Default"/>.
            </summary>
        </member>
        <member name="T:LinqToLdap.Mapping.AttributeClassMap`1">
            <summary>
            Uses attributes to map a class
            </summary>
            <typeparam name="T">The class to map</typeparam>
        </member>
        <member name="T:LinqToLdap.Mapping.ClassMap`1">
            <summary>
            Defines a mapping for a directory entry. Derive from this class to create a mapping,
            and use the constructor to control how your object is queryed.
            </summary>
            <example>
            public class UserMap : ClassMap&lt;User&gt;
            {
              public UserMap()
              {
                Map(x => x.Name)
                  .Named("displayname");
                Map(x => x.Age);
              }
            }
            </example>
            <typeparam name="T">Type to map</typeparam>
        </member>
        <member name="T:LinqToLdap.Mapping.IClassMap">
            <summary>
            Interface for a class that maps an object to the directory
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.IClassMap.PerformMapping(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Maps the schema and property information.
            </summary>
            <param name="objectCategory">The object category for the object.</param>
            <param name="includeObjectCategory">
            Indicates if the object category should be included in all queries.
            </param>
            <param name="namingContext">The location of the objects in the directory.</param>
            <param name="objectClasses">The object classes for the object.</param>
            <param name="includeObjectClasses">Indicates if the object classes should be included in all queries.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IClassMap.Validate">
            <summary>
            Validates the mapping.  Should throw a <see cref="T:LinqToLdap.Exceptions.MappingException"/> if the mapping is not valid.
            </summary>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">Thrown if the mapping is invalid.</exception>
        </member>
        <member name="M:LinqToLdap.Mapping.IClassMap.ToObjectMapping">
            <summary>
            Produces a final mapping used for object contruction from the directory
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.Mapping.IClassMap.Type">
            <summary>
            The <see cref="T:System.Type"/> of the class map.
            </summary>
        </member>
        <member name="F:LinqToLdap.Mapping.ClassMap`1.Flags">
            <summary>
            Flags used for looking up properties
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[][]}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{System.Byte[]}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.ObjectModel.Collection{System.Byte[]}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Enum}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Guid}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Int16}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.UInt16}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt16}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.UInt32}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt32}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.UInt64}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt64}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Byte}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.SByte}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.SByte}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Security.Principal.SecurityIdentifier}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.String[]}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime[]}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}[]}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.ObjectModel.Collection{System.String}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{System.String}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Security.Cryptography.X509Certificates.X509Certificate}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Security.Cryptography.X509Certificates.X509Certificate2}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Security.Cryptography.X509Certificates.X509Certificate[]}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Security.Principal.SecurityIdentifier[]}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Security.Cryptography.X509Certificates.X509Certificate2[]}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.ObjectModel.Collection{System.Security.Cryptography.X509Certificates.X509Certificate}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{System.Security.Cryptography.X509Certificates.X509Certificate}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.ObjectModel.Collection{System.Security.Cryptography.X509Certificates.X509Certificate2}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{System.Security.Cryptography.X509Certificates.X509Certificate2}}})">
            <summary>
            Create a property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            Map(x => x.Name);
            </example>
        </member>
        <member name="F:LinqToLdap.Mapping.ClassMap`1.PropertyMappings">
            <summary>
            All mapped properties
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.#ctor">
            <summary>
            Constructs the class map
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.PerformMapping(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Maps the schema and property information.
            </summary>
            <param name="objectCategory">The object category for the object.</param>
            <param name="includeObjectCategory">
            Indicates if the object category should be included in all queries.
            </param>
            <param name="namingContext">The location of the objects in the directory.</param>
            <param name="objectClasses">The object classes for the object.</param>
            <param name="includeObjectClasses">Indicates if the object classes should be included in all queries.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.Validate">
            <summary>
            Validates the mapping
            </summary>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if naming context is null or if no properties have been mapped
            </exception>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.GetNamingContext">
            <summary>
            Gets the naming context
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.GetObjectCategory">
            <summary>
            Gets the object category
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.GetObjectClass">
            <summary>
            Gets the object class
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.ToObjectMapping">
            <summary>
            Produces a final mapping used for object contruction from the directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.NamingContext(System.String)">
            <summary>
            Set the naming context for the directory entry
            </summary>
            <param name="distinguishedName">The distinguished name of the naming context</param>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.ObjectCategory(System.String,System.Boolean)">
            <summary>
            Set the object category for the directory entry
            </summary>
            <param name="objectCategory">The object category</param>
            <param name="includeObjectCategory">Indicates if the object category should be included in filters.</param>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.ObjectClasses(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Set the object classes for the directory entry
            </summary>
            <param name="objectClass">The object class</param>
            <param name="includeObjectClasses">Indicates if the object classes should be included in filters.</param>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.ObjectClass(System.String,System.Boolean)">
            <summary>
            Set the object class for the directory entry
            </summary>
            <param name="objectClass">The object class</param>
            <param name="includeObjectClass">Indicates if the object class should be included in queries</param>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.DistinguishedName(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>
            Maps the <paramref name="property"/> as the distinguished name.
            </summary>
            <param name="property">The distinguished name property.</param>
            <param name="attributeName">The name of the distinguished name attribute. Defaults to "distinguishedname".</param>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.MapPropertyInfo(System.Reflection.PropertyInfo,System.Boolean,System.Boolean)">
            <summary>
            Allows for mapping a raw <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="propertyInfo">The property to map</param>
            <param name="isDistinguishedName">Indicates if the attribute is the distinguishedname.</param>
            <param name="isReadOnly">Indicates if the property should be treated as read only in the directory.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ClassMap`1.MapCustomProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Create a custom property mapping.
            </summary>
            <param name="property">Property to map</param>
            <example>
            MapCustomProperty(x => x.Name);
            </example>
        </member>
        <member name="P:LinqToLdap.Mapping.ClassMap`1.Type">
            <summary>
            The <see cref="T:System.Type"/> of the class map.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.ClassMap`1.IsForAnonymousType">
            <summary>
            Indicates if the mapping is for an anonymous type.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.ClassMap`1.IncludeObjectCategory">
            <summary>
            Indicates if object category will be included in all queries.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.ClassMap`1.IncludeObjectClasses">
            <summary>
            Indicates if object classes will be included in all queries.
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.AttributeClassMap`1.PerformMapping(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Maps class information for <typeparamref name="T"/>.
            </summary>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">Thrown if <typeparamref name="T"/> does not have a <see cref="T:LinqToLdap.Mapping.DirectorySchemaAttribute"/>.</exception>
        </member>
        <member name="T:LinqToLdap.Mapping.IPropertyMappingBuilder">
            <summary>
            Interface for class that can build <see cref="T:LinqToLdap.Mapping.IPropertyMapping"/>
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMappingBuilder.ToPropertyMapping">
            <summary>
            Create the property mapping
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.Mapping.IPropertyMappingBuilder.PropertyName">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IPropertyMappingBuilder.IsDistinguishedName">
            <summary>
            Indicates if the builder is for a distinguished name property.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IPropertyMappingBuilder.IsReadOnly">
            <summary>
            Indicates if the property is read only
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IPropertyMappingBuilder.IsStoreGenerated">
            <summary>
            Indicates if the property is generated by the store.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IPropertyMappingBuilder.AttributeName">
            <summary>
            The name of the attribute in the directory.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IPropertyMappingBuilder.PropertyInfo">
            <summary>
            The <see cref="P:LinqToLdap.Mapping.IPropertyMappingBuilder.PropertyInfo"/>.
            </summary>
        </member>
        <member name="T:LinqToLdap.Mapping.ICustomPropertyMapper`2">
            <summary>
            Interface for custom mapping properties
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.ICustomPropertyMapper`2.Named(System.String)">
            <summary>
            Specify an attribute name for a mapped property.
            </summary>
            <param name="attributeName">Attribute name in the directory</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ICustomPropertyMapper`2.StoreGenerated">
            <summary>
            Indicates that the property is generated by the directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ICustomPropertyMapper`2.ConvertToFilterUsing(System.Func{`1,System.String})">
            <summary>
            Specify the function for converting the property value to a valid LDAP filter value.
            </summary>
            <param name="converter">The function</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ICustomPropertyMapper`2.ConvertFromDirectoryUsing(System.Func{System.DirectoryServices.Protocols.DirectoryAttribute,`1})">
            <summary>
            Specify the function for converting the <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute"/> to a valid value for the mapped property on a mapped object.
            </summary>
            <param name="converter">THe function</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ICustomPropertyMapper`2.ConvertToDirectoryUsing(System.Func{`1,System.Byte[]})">
            <summary>
            Specify the function for converting a property value to a valid directory value.
            </summary>
            <param name="converter">The function</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ICustomPropertyMapper`2.ConvertToDirectoryUsing(System.Func{`1,System.Byte[][]})">
            <summary>
            Specify the function for converting a property value to a valid directory value.
            </summary>
            <param name="converter">The function</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ICustomPropertyMapper`2.ConvertToDirectoryUsing(System.Func{`1,System.String})">
            <summary>
            Specify the function for converting a property value to a valid directory value.
            </summary>
            <param name="converter">The function</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ICustomPropertyMapper`2.ConvertToDirectoryUsing(System.Func{`1,System.String[]})">
            <summary>
            Specify the function for converting a property value to a valid directory value.
            </summary>
            <param name="converter">The function</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ICustomPropertyMapper`2.CompareChangesUsing(System.Func{`1,`1,System.Boolean})">
            <summary>
            The equal comparison to use when comparing the original value to the current value.  For use with change tracking updatable objects.  Will default to standard equals comparison if null.
            </summary>
            <param name="comparer">The function</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.ICustomPropertyMapper`2.ReadOnly">
            <summary>
            Indicates if the property should never be considered for updating.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Mapping.DistinguishedNameAttribute">
            <summary>
            Indicates that the property will contain the distinguished name for a class.
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.DistinguishedNameAttribute.#ctor(System.String)">
            <summary>
            Maps a property to the specified <paramref name="attributeName"/>.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
        </member>
        <member name="P:LinqToLdap.Mapping.DistinguishedNameAttribute.AttributeName">
            <summary>
            The mapped attribute name.
            </summary>
        </member>
        <member name="T:LinqToLdap.Mapping.DirectoryAttributeAttribute">
            <summary>
            Maps a property to an attribute in a directory.
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryAttributeAttribute.#ctor">
            <summary>
            Maps the property as is to an attribute.
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryAttributeAttribute.#ctor(System.String)">
            <summary>
            Maps a property to the specified <paramref name="attributeName"/>.
            </summary>
            <param name="attributeName">Name to map to</param>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectoryAttributeAttribute.AttributeName">
            <summary>
            The mapped attribute name.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectoryAttributeAttribute.EnumStoredAsInt">
            <summary>
            Speicfy that a <see cref="T:System.Enum"/> is stored as an int.  The default is string.
            If the property is not a <see cref="T:System.Enum"/> then this setting will be ignored.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectoryAttributeAttribute.ReadOnly">
            <summary>
            Specify if the attribute is read only.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectoryAttributeAttribute.StoreGenerated">
            <summary>
            Specify if the attribute is generated by the server.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectoryAttributeAttribute.DateTimeFormat">
            <summary>
            Specify the format of the DateTime in the directory.  Use null if the DateTime is stored in file time.  
            Default format is yyyyMMddHHmmss.0Z.  If the property is not a <see cref="T:System.DateTime"/> then this setting will be ignored.
            </summary>
            <example>
            <para>Common formats</para>
            <para>
            Active Directory: yyyyMMddHHmmss.0Z
            </para>
            <para>
            eDirectory: yyyyMMddHHmmssZ or yyyyMMddHHmmss00Z
            </para>
            </example>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Mapping.DirectoryObjectBase">
            <summary>
            Base class for updatable directory objects.
            </summary>
        </member>
        <member name="T:LinqToLdap.Mapping.IDirectoryObject">
            <summary>
            Interface for updatable directory objects.
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.IDirectoryObject.GetChanges(LinqToLdap.Mapping.IObjectMapping)">
            <summary>
            Gets the changes to send to the directory.
            </summary>
            <param name="mapping">The mapping for the object.</param>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.Mapping.IDirectoryObject.OriginalValues">
            <summary>
            The original property values loaded form the directory for this object.
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryObjectBase.GetChanges(System.Object,LinqToLdap.Mapping.IObjectMapping,LinqToLdap.Collections.OriginalValuesCollection)">
            <summary>
            Method for identifying changes.  Simplifies implementing <see cref="T:LinqToLdap.Mapping.IDirectoryObject"/> manually.
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryObjectBase.GetChanges(LinqToLdap.Mapping.IObjectMapping)">
            <summary>
            Gets the changes to send to the directory.
            </summary>
            <param name="mapping">The mapping for the object.</param>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectoryObjectBase.OriginalValues">
            <summary>
            The original property values loaded form the directory for this object.
            </summary>
        </member>
        <member name="T:LinqToLdap.Mapping.DirectorySchemaAttribute">
            <summary>
            Maps an object to a naming context in the directory
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectorySchemaAttribute.#ctor(System.String)">
            <summary>
            Maps the object to the naming context
            </summary>
            <param name="namingContext">The naming context</param>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectorySchemaAttribute.ObjectClasses">
            <summary>
            Mapped object classes
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectorySchemaAttribute.ObjectClass">
            <summary>
            Mapped object class
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectorySchemaAttribute.NamingContext">
            <summary>
            Mapped naming context
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectorySchemaAttribute.ObjectCategory">
            <summary>
            Mapped object category
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectorySchemaAttribute.IncludeObjectCategory">
            <summary>
            Indicates if the object category should be included in filters.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectorySchemaAttribute.IncludeObjectClasses">
            <summary>
            Indicates if the object classes should be included in filters.
            </summary>
        </member>
        <member name="T:LinqToLdap.Mapping.IObjectMapping">
            <summary>
            Interface for an object mapped to a directory object
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.IObjectMapping.GetPropertyMappings">
            <summary>
            All mapped properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IObjectMapping.GetUpdateablePropertyMappings">
            <summary>
            All mapped properties except those mapped as read-only, store-generated, or distinguished name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IObjectMapping.GetPropertyMapping(System.String)">
            <summary>
            Gets a property mapping by property name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IObjectMapping.GetDistinguishedNameMapping">
             <summary>
             Returns the distinguished name property mapping or null if there isn't one.
             </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IObjectMapping.Create(System.Object[])">
            <summary>
            Creates an instance of the mapped class
            </summary>
            <param name="parameters">constructor parameters</param>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.Mapping.IObjectMapping.Type">
            <summary>
            Mapped class type
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IObjectMapping.IsForAnonymousType">
            <summary>
            
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IObjectMapping.NamingContext">
            <summary>
            Naming context for the mapped object
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IObjectMapping.ObjectCategory">
            <summary>
            Object category for the mapped object
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IObjectMapping.IncludeObjectCategory">
            <summary>
            Indicates if the object category should always be included in queries.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IObjectMapping.ObjectClasses">
            <summary>
            Object classes for the mapped object
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IObjectMapping.IncludeObjectClasses">
            <summary>
            Indicates if the object classes should always be included in queries.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IObjectMapping.Properties">
            <summary>
            Dictionary for properties mapped to attribute names
            </summary>
        </member>
        <member name="T:LinqToLdap.Mapping.IDirectoryMapper">
            <summary>
            Maps classes for use in querying and updating a LDAP server.
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.IDirectoryMapper.Map(LinqToLdap.Mapping.IClassMap,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates or retrieves the <see cref="T:LinqToLdap.Mapping.IObjectMapping"/> from the classMap.
            </summary>
            <param name="classMap">The mapping.</param>
            <param name="objectCategory">The object category for the object.</param>
            <param name="includeObjectCategory">
            Indicates if the object category should be included in all queries.
            </param>
            <param name="namingContext">The location of the objects in the directory.</param>
            <param name="objectClasses">The object classes for the object.</param>
            <param name="includeObjectClasses">Indicates if the object classes should be included in all queries.</param>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if the mapping is invalid.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IDirectoryMapper.Map``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates or retrieves the <see cref="T:LinqToLdap.Mapping.IObjectMapping"/> from <typeparam name="T"/>.
            </summary>
            <param name="namingContext">The optional naming context.  Used for <see cref="T:LinqToLdap.Mapping.AutoClassMap`1"/></param>
            <param name="objectClasses">The optional object classes.  Used for <see cref="T:LinqToLdap.Mapping.AutoClassMap`1"/></param>
            <param name="objectClass">The optional object class.  Used for <see cref="T:LinqToLdap.Mapping.AutoClassMap`1"/></param>
            <param name="objectCategory">The optional object category.  Used for <see cref="T:LinqToLdap.Mapping.AutoClassMap`1"/></param>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if the mapping is invalid.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IDirectoryMapper.GetMapping``1">
            <summary>
            Gets the mapping for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type for the mapping.</typeparam>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if the mapping is not found.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IDirectoryMapper.GetMapping(System.Type)">
            <summary>
            Gets the mapping for <param name="type"/>.
            </summary>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if the mapping is not found.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IDirectoryMapper.GetMappings">
            <summary>
            Returns all mappings tracked by this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IDirectoryMapper.AddMappingsFrom(System.Reflection.Assembly)">
            <summary>
            Adds all mappings from <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly containing the mappings.</param>
        </member>
        <member name="M:LinqToLdap.Mapping.IDirectoryMapper.AddMappingsFrom(System.String)">
            <summary>
            Adds all mappings in the assembly.
            </summary>
            <param name="assemblyName">
            The name of the assembly containing the mappings.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="assemblyName"/> is null, empty or white space.
            </exception>
        </member>
        <member name="M:LinqToLdap.Mapping.IDirectoryMapper.AutoMapWith(System.Func{System.Type,LinqToLdap.Mapping.IClassMap})">
            <summary>
            Provide a delegate that takes an object type and returns the class map for it.
            </summary>
            <param name="autoClassMapBuilder">The delegate.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IDirectoryMapper.AttributeMapWith(System.Func{System.Type,LinqToLdap.Mapping.IClassMap})">
            <summary>
            Provide a delegate that takes an object type and returns the class map for it.
            </summary>
            <param name="attributeClassMapBuilder">The delegate.</param>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.Mapping.IDirectoryMapper.HasCustomAutoMapping">
            <summary>
            Indicates if a custom AutoMapping delegate has been provided
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IDirectoryMapper.HasCustomAttributeMapping">
            <summary>
            Indicates if a custom AttributeMapping delegate has been provided
            </summary>
        </member>
        <member name="T:LinqToLdap.Mapping.IPropertyMapperGeneric`1">
            <summary>
            Interface for mapping properties
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapperGeneric`1.Named(System.String)">
            <summary>
            Specify an attribute name for a mapped property.
            </summary>
            <param name="attributeName">Attribute name in the directory</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapperGeneric`1.DateTimeFormat(System.String)">
            <summary>
            Specify the format of the DateTime in the directory.  Use null if the DateTime is stored in file time.  
            Default format is yyyyMMddHHmmss.0Z.  If the property is not a <see cref="T:System.DateTime"/> then this setting will be ignored.
            </summary>
            <example>
            <para>Common formats</para>
            <para>
            Active Directory: yyyyMMddHHmmss.0Z
            </para>
            <para>
            eDirectory: yyyyMMddHHmmssZ or yyyyMMddHHmmss00Z
            </para>
            </example>
            <param name="format">The format of the DateTime in the directory.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapperGeneric`1.EnumStoredAsInt">
            <summary>
            Speicfy that a <see cref="T:System.Enum"/> is stored as an int.  The default is string.
            If the property is not a <see cref="T:System.Enum"/> then this setting will be ignored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapperGeneric`1.StoreGenerated">
            <summary>
            Indicates that the property is generated by the directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapperGeneric`1.ReadOnly">
            <summary>
            Indicates if the property should never be considered for updating.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Mapping.IPropertyMapper">
            <summary>
            Interface for mapping properties
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapper.Named(System.String)">
            <summary>
            Specify an attribute name for a mapped property.
            </summary>
            <param name="attributeName">Attribute name in the directory</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapper.DateTimeFormat(System.String)">
            <summary>
            Specify the format of the DateTime in the directory.  Use null if the DateTime is stored in file time.  
            Default format is yyyyMMddHHmmss.0Z.  If the property is not a <see cref="T:System.DateTime"/> then this setting will be ignored.
            </summary>
            <example>
            <para>Common formats</para>
            <para>
            Active Directory: yyyyMMddHHmmss.0Z
            </para>
            <para>
            eDirectory: yyyyMMddHHmmssZ or yyyyMMddHHmmss00Z
            </para>
            </example>
            <param name="format">The format of the DateTime in the directory.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapper.EnumStoredAsInt">
            <summary>
            Specify that a <see cref="T:System.Enum"/> is stored as an int.  The default is string.
            If the property is not a <see cref="T:System.Enum"/> then this setting will be ignored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapper.StoreGenerated">
            <summary>
            Indicates that the property is generated by the directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapper.ReadOnly">
            <summary>
            Indicates if the property should never be considered for updating.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.LdapConfiguration">
            <summary>
            Class for configuring LINQ to LDAP.
            </summary>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.#ctor">
            <summary>
            Constructs an instance of this class and initializes <see cref="P:LinqToLdap.LdapConfiguration.Mapper"/>.
            </summary>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.Finalize">
            <summary>
            Deconstructor that sets related properties to null.
            </summary>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.GetListeners``1">
            <summary>
            Get all event listeners of type <typeparamref name="TListener"/> registered with this configuration.
            </summary>
            <typeparam name="TListener">The type of listeners to retrieve.</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.GetListeners">
            <summary>
            Get all event listeners registered with this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.RegisterListeners(LinqToLdap.EventListeners.IEventListener[])">
            <summary>
            Registers the listeners with this configuration.
            </summary>
            <param name="listeners">Implementations of <see cref="T:LinqToLdap.EventListeners.IEventListener"/>.</param>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.MaxPageSizeIs(System.Int32)">
            <summary>
            Indicates the maximum number of results the server can return at a time.
            </summary>
            <param name="size">The maximum amount.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.DisablePaging">
            <summary>
            Disables paging for all <see cref="T:LinqToLdap.DirectoryContext"/>s using this configuration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.AddMapping(LinqToLdap.Mapping.IClassMap,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Adds the mapping.
            </summary>
            <param name="classMap">The mapping for the class</param>
            <param name="objectCategory">The object category for the object.</param>
            <param name="includeObjectCategory">
            Indicates if the object category should be included in all queries.
            </param>
            <param name="namingContext">The location of the objects in the directory.</param>
            <param name="objectClasses">The object classes for the object.</param>
            <param name="includeObjectClasses">Indicates if the object classes should be included in all queries.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.AddMappingsFrom(System.Reflection.Assembly)">
            <summary>
            Adds all mappings in the assembly.
            </summary>
            <param name="assembly">
            The assembly containing all of the mappings
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.AddMappingsFrom(System.String)">
            <summary>
            Adds all mappings in the assembly.
            </summary>
            <param name="assemblyName">
            The assembly containing all of the mappings
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.ConfigureFactory(System.String)">
            <summary>
            Starts configuration of <see cref="T:LinqToLdap.LdapConnectionFactory"/>.
            </summary>
            <param name="serverName">
            The server name can be an IP address, a DNS domain or host name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            THrown if <paramref name="serverName"/> is null, empty or white-space.
            </exception>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.ConfigurePooledFactory(System.String)">
            <summary>
            Starts configuration of a connection factory that uses connection pooling.
            </summary>
            <param name="serverName">
            The server name can be an IP address, a DNS domain or host name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            THrown if <paramref name="serverName"/> is null, empty or white-space.
            </exception>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.ConfigureCustomFactory``1(``0)">
            <summary>
            Configure a custom connection factory.
            </summary>
            <param name="customFactory">The factory.</param>
            <typeparam name="T">Type of the factory</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.UseStaticStorage">
            <summary>
            Sets <see cref="P:LinqToLdap.LdapConfiguration.Configuration"/> for global configuration access.
            </summary>
            <returns></returns>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">Throw if this method is called more than once.</exception>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.CreateContext">
             <summary>
             Creates a <see cref="T:LinqToLdap.DirectoryContext"/> from the configuration.
             </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.LdapConfiguration.LogTo(LinqToLdap.Logging.ILinqToLdapLogger)">
            <summary>
            Sets the logger for <see cref="P:LinqToLdap.LdapConfiguration.ConnectionFactory"/> and <see cref="T:LinqToLdap.DirectoryContext"/>s created or configured by this class.
            </summary>
            <param name="log">The log implementation.</param>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.LdapConfiguration.ConnectionFactory">
            <summary>
            The configured connection factory to be used for all 
            <see cref="T:LinqToLdap.DirectoryContext"/>s that don't explicitly get an <see cref="T:System.DirectoryServices.Protocols.LdapConnection"/>.
            </summary>
        </member>
        <member name="P:LinqToLdap.LdapConfiguration.Log">
            <summary>
            Used for writing <see cref="T:System.DirectoryServices.Protocols.DirectoryRequest"/> and <see cref="T:System.DirectoryServices.Protocols.DirectoryResponse"/> information to a log.
            </summary>
        </member>
        <member name="P:LinqToLdap.LdapConfiguration.Mapper">
            <summary>
            Class responsible for mapping objects to directory entries.
            </summary>
        </member>
        <member name="P:LinqToLdap.LdapConfiguration.Configuration">
            <summary>
            Static storage for a global configuration.
            </summary>
        </member>
        <member name="P:LinqToLdap.LdapConfiguration.ServerMaxPageSize">
            <summary>
            Get the server max page size.  Default is 500.  Change this value with <see cref="M:LinqToLdap.LdapConfiguration.MaxPageSizeIs(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:LinqToLdap.LdapConfiguration.PagingEnabled">
            <summary>
            Indicates if paging is enabled.
            </summary>
        </member>
        <member name="T:LinqToLdap.Exceptions.MappingException">
            <summary>
            Exception to indicate that something has been mapped incorrectly or not at all.
            </summary>
        </member>
        <member name="T:LinqToLdap.Exceptions.MissingConstructorException">
            <summary>
            Exception thrown if delegate creation fails for mapped objects
            </summary>
        </member>
        <member name="T:LinqToLdap.Mapping.AutoClassMap`1">
            <summary>
            Generates a class map via convention.  Property names will map directly to their attribute names.
            </summary>
            <typeparam name="T">Class to map</typeparam>
        </member>
        <member name="M:LinqToLdap.Mapping.AutoClassMap`1.PerformMapping(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Maps the schema and property information.
            </summary>
            <param name="objectCategory">The object category for the object.</param>
            <param name="includeObjectCategory">
            Indicates if the object category should be included in all queries.
            </param>
            <param name="namingContext">The location of the objects in the directory.</param>
            <param name="objectClasses">The object classes for the object.</param>
            <param name="includeObjectClasses">Indicates if the object classes should be included in all queries.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.AutoClassMap`1.ToObjectMapping">
            <summary>
            Converts the mapping to functional object mapping.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Mapping.DirectoryMapper">
            <summary>
            Class for storing a retrieving object mappings.
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryMapper.GetMappings">
            <summary>
            Returns all mappings tracked by this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryMapper.AutoMapWith(System.Func{System.Type,LinqToLdap.Mapping.IClassMap})">
            <summary>
            Provide a delegate that takes an object type and returns the class map for it.
            </summary>
            <param name="autoClassMapBuilder">The delegate.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryMapper.AttributeMapWith(System.Func{System.Type,LinqToLdap.Mapping.IClassMap})">
            <summary>
            Provide a delegate that takes an object type and returns the class map for it.
            </summary>
            <param name="attributeClassMapBuilder">The delegate.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryMapper.AddMappingsFrom(System.String)">
            <summary>
            Adds all mappings in the assembly.
            </summary>
            <param name="assemblyName">
            The name of the assembly containing the mappings.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="assemblyName"/> is null, empty or white space.
            </exception>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryMapper.AddMappingsFrom(System.Reflection.Assembly)">
            <summary>
            Adds all mappings from <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly containing the mappings.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="assembly"/> is null..
            </exception>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryMapper.Map(LinqToLdap.Mapping.IClassMap,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates or retrieves the <see cref="T:LinqToLdap.Mapping.IObjectMapping"/> from the classMap.
            </summary>
            <param name="classMap">The mapping.</param>
            <param name="objectCategory">The object category for the object.</param>
            <param name="includeObjectCategory">
            Indicates if the object category should be included in all queries.
            </param>
            <param name="namingContext">The location of the objects in the directory.</param>
            <param name="objectClasses">The object classes for the object.</param>
            <param name="includeObjectClasses">Indicates if the object classes should be included in all queries.</param>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if the mapping is invalid.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryMapper.Map``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates or retrieves the <see cref="T:LinqToLdap.Mapping.IObjectMapping"/> from <typeparam name="T"/>.
            </summary>
            <param name="namingContext">The optional naming context.  Used for <see cref="T:LinqToLdap.Mapping.AutoClassMap`1"/></param>
            <param name="objectClasses">The optional object classes.  Used for <see cref="T:LinqToLdap.Mapping.AutoClassMap`1"/></param>
            <param name="objectClass">The optional object class.  Used for <see cref="T:LinqToLdap.Mapping.AutoClassMap`1"/></param>
            <param name="objectCategory">The optional object category.  Used for <see cref="T:LinqToLdap.Mapping.AutoClassMap`1"/></param>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if the mapping is invalid.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryMapper.GetMapping``1">
            <summary>
            Gets the mapping for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type for the mapping.</typeparam>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if the mapping is not found.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.DirectoryMapper.GetMapping(System.Type)">
            <summary>
            Gets the mapping for <param name="type"/>.
            </summary>
            <exception cref="T:LinqToLdap.Exceptions.MappingException">
            Thrown if the mapping is not found.
            </exception>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectoryMapper.HasCustomAutoMapping">
            <summary>
            Indicates if a custom AutoMapping delegate has been provided
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.DirectoryMapper.HasCustomAttributeMapping">
            <summary>
            Indicates if a custom AttributeMapping delegate has been provided
            </summary>
        </member>
        <member name="T:LinqToLdap.Mapping.IPropertyMapping">
            <summary>
            Interface for a mapped property
            </summary>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapping.Default">
            <summary>
            Gets the default value of the type for the property
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapping.GetValue(System.Object)">
            <summary>
            Gets the value from the property on <paramref name="instance"/>.
            </summary>
            <param name="instance">Object to get the value from</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapping.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value on the property for <paramref name="instance"/>.
            </summary>
            <param name="instance">Object to set the value for</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapping.FormatValueFromDirectory(System.DirectoryServices.Protocols.DirectoryAttribute,System.String)">
            <summary>
            Converts the value from the directory into a type that is valid for the mapped property.
            </summary>
            <param name="value">The value from the directory</param>
            <param name="dn">Distinguished name for the attribute</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapping.FormatValueToFilter(System.Object)">
            <summary>
            Converts <paramref name="value"/> to a form that is valid for an LDAP filter.
            </summary>
            <param name="value">The value to format</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapping.GetDirectoryAttributeModification(System.Object)">
             <summary>
             Builds a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttributeModification"/> from the value of this property on <paramref name="instance"/>.
             </summary>
            <param name="instance">The object</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapping.GetDirectoryAttribute(System.Object)">
             <summary>
             Builds a <see cref="T:System.DirectoryServices.Protocols.DirectoryAttribute"/> from the value of this property on <paramref name="instance"/>.
             </summary>
            <param name="instance">The object</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.IPropertyMapping.IsEqual(System.Object,System.Object,System.DirectoryServices.Protocols.DirectoryAttributeModification@)">
            <summary>
            Determines if <paramref name="value"/> is equal to the current value for the property.
            </summary>
            <param name="instance">The instance from which to get the current value.</param>
            <param name="value">The value to compare.</param>
            <param name="modification">The resulting modification if the values are not equal.</param>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.Mapping.IPropertyMapping.PropertyType">
            <summary>
            The type of the property
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IPropertyMapping.PropertyName">
            <summary>
            Name of the property
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IPropertyMapping.AttributeName">
            <summary>
            Name of the property in the directory
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IPropertyMapping.IsStoreGenerated">
            <summary>
            Indicates if the property is generated by the server.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IPropertyMapping.IsDistinguishedName">
            <summary>
            Indicates if the property is for the distinguished name.
            </summary>
        </member>
        <member name="P:LinqToLdap.Mapping.IPropertyMapping.IsReadOnly">
            <summary>
            Indicates if the property is read only.
            </summary>
        </member>
        <member name="T:LinqToLdap.Mapping.PropertyMappingBuilders.IDateTimePropertyMappingBuilder`2">
            <summary>
            Interface for a DateTimePropertyMappingBuilder.
            </summary>
            <typeparam name="T">The type of the owner of the property</typeparam>
            <typeparam name="TProperty">The type of the property</typeparam>
        </member>
        <member name="T:LinqToLdap.Mapping.PropertyMappingBuilders.IDirectoryValueConversionMapper`2">
            <summary>
            The mapper method for the directory value.
            </summary>
            <typeparam name="TPropertyMappingBuilder">The type of the property mapping builder.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:LinqToLdap.Mapping.PropertyMappingBuilders.IDirectoryValueConversionMapper`2.DirectoryValue(System.String)">
            <summary>
            Maps a single-valued directory value.
            </summary>
            <param name="directoryValue">The value from the directory.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.PropertyMappingBuilders.IDirectoryValueConversionMapper`2.DirectoryValueNotSetOrEmpty">
            <summary>
            Maps a not set or empty value from the directory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Mapping.PropertyMappingBuilders.IDirectoryToConversion`2">
            <summary>
            Interface for directory value conversion to instance value.
            </summary>
            <typeparam name="TPropertyMappingBuilder">Type of the mapping builder</typeparam>
            <typeparam name="TProperty">The property type</typeparam>
        </member>
        <member name="M:LinqToLdap.Mapping.PropertyMappingBuilders.IDirectoryToConversion`2.Returns(`1)">
            <summary>
            The value to return in place of the encountered directory value.
            </summary>
            <param name="value">The instance value</param>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Mapping.PropertyMappingBuilders.IInstanceValueConversionMapper`2">
            <summary>
            The mapper method for the instance value.
            </summary>
            <typeparam name="TPropertyMappingBuilder"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:LinqToLdap.Mapping.PropertyMappingBuilders.IInstanceValueConversionMapper`2.InstanceValue(`1)">
            <summary>
            Maps a single-valued instace value.
            </summary>
            <param name="instacneValue">The value from the instance.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.PropertyMappingBuilders.IInstanceValueConversionMapper`2.InstanceValueNullOrDefault">
            <summary>
            Maps a not null or default value from the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Mapping.PropertyMappingBuilders.IInstanceToConversion`1">
            <summary>
            Interface for instance value conversion to a directory value.
            </summary>
            <typeparam name="TPropertyMappingBuilder">Type of the mapping builder</typeparam>
        </member>
        <member name="M:LinqToLdap.Mapping.PropertyMappingBuilders.IInstanceToConversion`1.Sends(System.String)">
            <summary>
            The value to send in place of the encountered instance value.
            </summary>
            <param name="value">The directory value</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.PropertyMappingBuilders.IDateTimePropertyMappingBuilder`2.Named(System.String)">
            <summary>
            Specify an attribute name for a mapped property.
            </summary>
            <param name="attributeName">Attribute name in the directory</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.PropertyMappingBuilders.IDateTimePropertyMappingBuilder`2.DateTimeFormat(System.String)">
            <summary>
            Specify the format of the DateTime in the directory.  Use null if the DateTime is stored in file time.  
            Default format is yyyyMMddHHmmss.0Z.  If the property is not a <see cref="T:System.DateTime"/> then this setting will be ignored.
            </summary>
            <example>
            <para>Common formats</para>
            <para>
            Active Directory: yyyyMMddHHmmss.0Z
            </para>
            <para>
            eDirectory: yyyyMMddHHmmssZ or yyyyMMddHHmmss00Z
            </para>
            </example>
            <param name="format">The format of the DateTime in the directory.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.PropertyMappingBuilders.IDateTimePropertyMappingBuilder`2.StoreGenerated">
            <summary>
            Indicates that the property is generated by the directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Mapping.PropertyMappingBuilders.IDateTimePropertyMappingBuilder`2.ReadOnly">
            <summary>
            Indicates if the property should never be considered for updating.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Mapping.SubClassMap`2">
            <summary>
            Defines a mapping for a directory entry. Derive from this class to create a mapping,
            and use the constructor to control how your object is queryed.
            </summary>
            <example>
            public class UserMap : SubClassMap&lt;User&gt;
            {
              public UserMap() : base(new SuperUserMap())
              {
                Map(x => x.Name)
                  .Named("displayname");
                Map(x => x.Age);
              }
            }
            </example>
            <typeparam name="T">Type to map</typeparam>
            <typeparam name="TSuper">Super type for <typeparamref name="T"/>.</typeparam>
        </member>
        <member name="M:LinqToLdap.Mapping.SubClassMap`2.#ctor(LinqToLdap.Mapping.ClassMap{`1})">
            <summary>
            Adds the properties from the parent mapping to the sub class.
            </summary>
            <param name="parentMapping"></param>
        </member>
        <member name="M:LinqToLdap.Mapping.SubClassMap`2.Ignore``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Removes the mapping for a property.
            </summary>
            <typeparam name="TValue">The type of the property</typeparam>
            <param name="property">The property to remove</param>
        </member>
        <member name="T:LinqToLdap.OC">
            <summary>
            Enum for indicating Object Classes and or Object Category to be included / excluded from queries.
            </summary>
        </member>
        <member name="F:LinqToLdap.OC.ObjectCategory">
            <summary>
            Only Object Category
            </summary>
        </member>
        <member name="F:LinqToLdap.OC.ObjectClasses">
            <summary>
            Only Object Classes
            </summary>
        </member>
        <member name="F:LinqToLdap.OC.Both">
            <summary>
            Object Category and Object Classes
            </summary>
        </member>
        <member name="T:LinqToLdap.PredicateBuilder">
            <summary>
            Class containing useful methods for expression building.
            </summary>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property name from the member expression.
            </summary>
            <typeparam name="T">Type</typeparam>
            <typeparam name="TProperty">Property type</typeparam>
            <param name="property">The expression</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="property"/> is not a valid member expression.</exception>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.GetPropertyExpression``1(System.String)">
            <summary>
            Builds a property getter expression.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="propertyName">THe property name</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.Create``1">
            <summary>
            Allows for easy inline expression creation.  The returned expression is null.  
            This method only serves as a quick starting point for building predicates.
            </summary>
            <typeparam name="T">Expression parameter</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.CreateExpression``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Allows for easy inline expression creation.  The returned expression is null.  
            This method only serves as a quick starting point for building predicates.
            </summary>
            <typeparam name="T">Expression parameter</typeparam>
            <typeparam name="TResult">Return type of expression</typeparam>
            <param name="example">Anonymous object to use for <typeparamref name="T"/></param>
            <param name="expression">Expression to return</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Allows for dynamic Or chaining of expressions.  <paramref name="appendExpression"/> 
            is returned if <paramref name="sourceExpression"/> is null.
            </summary>
            <typeparam name="T">Expression parameter</typeparam>
            <param name="sourceExpression">The original expression</param>
            <param name="appendExpression">The expression to chain</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Allows for dynamic And chaining of expressions.  <paramref name="appendExpression"/> 
            is returned if <paramref name="sourceExpression"/> is null.
            </summary>
            <typeparam name="T">Expression parameter</typeparam>
            <param name="sourceExpression">The original expression</param>
            <param name="appendExpression">The expression to chain</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key. 
            </summary>
            <param name="source">Query source</param>
            <param name="propertyName">The name of the property to sort by</param>
            <typeparam name="T">Type to query against</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.OrderByDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key. 
            </summary>
            <param name="source">Query source</param>
            <param name="propertyName">The name of the property to sort by</param>
            <typeparam name="T">Type to query against</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereEqual``1(System.String,System.Object)">
            <summary>
            Build a dynamic equal expression from the property name and a value.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereEqual``1(``0,System.String,System.Object)">
            <summary>
            Build a dynamic equal expression from the property name and a value.
            </summary>
            <param name="example">An example for <typeparamref name="T"/></param>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereNotEqual``1(System.String,System.Object)">
            <summary>
            Build a dynamic not equal expression from the property name and a value.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereNotEqual``1(``0,System.String,System.Object)">
            <summary>
            Build a dynamic not equal expression from the property name and a value.
            </summary>
            <param name="example">An example for <typeparamref name="T"/></param>.
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereGreaterThan``1(System.String,System.Object)">
            <summary>
            Build a dynamic greater than expression from the property name and a value.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereGreaterThan``1(``0,System.String,System.Object)">
            <summary>
            Build a dynamic greater than expression from the property name and a value.
            </summary>
            <param name="example">An example for <typeparamref name="T"/></param>.
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereGreaterThanOrEqual``1(System.String,System.Object)">
            <summary>
            Build a dynamic greater than or equal expression from the property name and a value.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereGreaterThanOrEqual``1(``0,System.String,System.Object)">
            <summary>
            Build a dynamic greater than or equal expression from the property name and a value.
            </summary>
            <param name="example">An example for <typeparamref name="T"/></param>.
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereLessThan``1(System.String,System.Object)">
            <summary>
            Build a dynamic less than expression from the property name and a value.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereLessThanOrEqual``1(System.String,System.Object)">
            <summary>
            Build a dynamic less than or equal expression from the property name and a value.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereLike``1(System.String,System.String)">
            <summary>
            Build a dynamic string contains expression from the property name and a value.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereNotLike``1(System.String,System.String)">
            <summary>
            Build a dynamic not string contains expression from the property name and a value.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereStartsWith``1(System.String,System.String)">
            <summary>
            Build a dynamic string starts with expression from the property name and a value.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereNotStartsWith``1(System.String,System.String)">
            <summary>
            Build a dynamic not string starts with expression from the property name and a value.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereEndsWith``1(System.String,System.String)">
            <summary>
            Build a dynamic string ends with expression from the property name and a value.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereNotEndsWith``1(System.String,System.String)">
            <summary>
            Build a dynamic not string ends with expression from the property name and a value.
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereContains``1(System.String,System.Object)">
            <summary>
            Builds a contains expression for collections using <see cref="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)"/>
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.PredicateBuilder.WhereNotContains``1(System.String,System.Object)">
            <summary>
            Builds a not contains expression for collections using <see cref="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)"/>
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The value for the expression.</param>
            <typeparam name="T">The type for the expression</typeparam>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.QueryableExtensions">
            <summary>
            Contains <see cref="T:System.Linq.IQueryable`1"/> extension methods.
            </summary>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.WithControls``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{System.DirectoryServices.Protocols.DirectoryControl})">
            <summary>
            Allows you to specify add <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to the query.
            </summary>
            <typeparam name="TSource">The type to query against</typeparam>
            <param name="source">The query.</param>
            <param name="controls">The <see cref="T:System.DirectoryServices.Protocols.DirectoryControl"/>s to use.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> or <paramref name="controls"/> is null.
            </exception>
            <exception cref="T:LinqToLdap.Exceptions.FilterException">
            Thrown if <paramref name="controls"/> has 0 elements.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.ScopedToAttribute``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Creates an attribute scoped query using <see cref="T:System.DirectoryServices.Protocols.AsqRequestControl"/>.
            </summary>
            <typeparam name="TSource">The type to query against</typeparam>
            <param name="source">The query.</param>
            <param name="attributeName">The name of the attribute to which this query will be scoped.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> is null.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.SearchWith``1(System.Linq.IQueryable{``0},System.DirectoryServices.Protocols.SearchOption)">
            <summary>
            Adds a <see cref="T:System.DirectoryServices.Protocols.SearchOptionsControl"/> to the search with the specified <paramref name="option"/>.
            </summary>
            <typeparam name="TSource">The type to query against</typeparam>
            <param name="source">The query.</param>
            <param name="option">The <see cref="T:System.DirectoryServices.Protocols.SearchOption"/> for the search</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.ListAttributes``1(System.Linq.IQueryable{``0},System.String[])">
            <summary>
            Lists found attributes for all entries returned by the query.
            </summary>
            <typeparam name="TSource">The type to query against</typeparam>
            <param name="source">The query.</param>
            <param name="attributes">Specify specific attributes to load</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.FilterWith``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Allows you to specify a custom filter for querying.
            </summary>
            <typeparam name="TSource">The type to query against</typeparam>
            <param name="source">The query.</param>
            <param name="filter">The filter to use for querying</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> is null.
            </exception>
            <exception cref="T:LinqToLdap.Exceptions.FilterException">
            Thrown if <paramref name="filter"/> is null, empty, or white-space.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Allows you to specify a custom filter for querying.
            </summary>
            <typeparam name="TSource">The type to query against</typeparam>
            <param name="source">The query.</param>
            <param name="filter">The filter to use for querying</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> is null.
            </exception>
            <exception cref="T:LinqToLdap.Exceptions.FilterException">
            Thrown if <paramref name="filter"/> is null, empty, or white-space.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.IgnoreOC``1(System.Linq.IQueryable{``0})">
            <summary>
            When this method is included in a query the object class or the object category will not be used in the filter.
            </summary>
            <param name="source">The query.</param>
            <typeparam name="TSource">The type to query against.</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.IgnoreOC``1(System.Linq.IQueryable{``0},LinqToLdap.OC)">
            <summary>
            When this method is included in a query the object class or the object category will not be used in the filter.
            </summary>
            <param name="source">The query.</param>
            <param name="oc">Indicates the type of <see cref="T:LinqToLdap.OC"/> to ignore.</param>
            <typeparam name="TSource">The type to query against.</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.IncludeOC``1(System.Linq.IQueryable{``0},LinqToLdap.OC)">
            <summary>
            When this method is included in a query the object class or the object category will not be used in the filter.
            </summary>
            <param name="source">The query.</param>
            <param name="oc">Indicates the type of <see cref="T:LinqToLdap.OC"/> to include.</param>
            <typeparam name="TSource">The type to query against.</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key and mathcing rule.
            </summary>
            <param name="source">The query</param>
            <param name="keySelector">The property to sort by</param>
            <param name="matchingRule">The LDAP matching rule to use for the query</param>
            <typeparam name="TSource">The type to query against</typeparam>
            <typeparam name="TKey">The type of the property</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/>, <paramref name="matchingRule"/>, or <paramref name="keySelector"/> are null
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key and mathcing rule.
            </summary>
            <param name="source">The query</param>
            <param name="keySelector">The property to sort by</param>
            <param name="matchingRule">The LDAP matching rule to use for the query</param>
            <typeparam name="TSource">The type to query against</typeparam>
            <typeparam name="TKey">The type of the property</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/>, <paramref name="matchingRule"/>, or <paramref name="keySelector"/> are null
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key and mathcing rule.
            </summary>
            <param name="source">The query</param>
            <param name="attribute">The attribute by which to order.</param>
            <param name="matchingRule">The LDAP matching rule to use for the query</param>
            <typeparam name="TSource">The type to query against</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/>, <paramref name="matchingRule"/>, or <paramref name="attribute"/> are null
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key and mathcing rule.
            </summary>
            <param name="source">The query</param>
            <param name="attribute">The attrbiute by which to sort.</param>
            <param name="matchingRule">The LDAP matching rule to use for the query</param>
            <typeparam name="TSource">The type to query against</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/>, <paramref name="matchingRule"/>, or <paramref name="attribute"/> are null
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key and mathcing rule.
            </summary>
            <param name="source">The query</param>
            <param name="keySelector">The property to sort by</param>
            <param name="matchingRule">The LDAP matching rule to use for the query</param>
            <typeparam name="TSource">The type to query against</typeparam>
            <typeparam name="TKey">The type of the property</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/>, <paramref name="matchingRule"/>, or <paramref name="keySelector"/> are null
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key and mathcing rule.
            </summary>
            <param name="source">The query</param>
            <param name="keySelector">The property to sort by</param>
            <param name="matchingRule">The LDAP matching rule to use for the query</param>
            <typeparam name="TSource">The type to query against</typeparam>
            <typeparam name="TKey">The type of the property</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/>, <paramref name="matchingRule"/>, or <paramref name="keySelector"/> are null
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.String,System.String)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key and mathcing rule.
            </summary>
            <param name="source">The query</param>
            <param name="attribute">The attribute by which to order.</param>
            <param name="matchingRule">The LDAP matching rule to use for the query</param>
            <typeparam name="TSource">The type to query against</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/>, <paramref name="matchingRule"/>, or <paramref name="attribute"/> are null
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String,System.String)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key and mathcing rule.
            </summary>
            <param name="source">The query</param>
            <param name="attribute">The attrbiute by which to sort.</param>
            <param name="matchingRule">The LDAP matching rule to use for the query</param>
            <typeparam name="TSource">The type to query against</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/>, <paramref name="matchingRule"/>, or <paramref name="attribute"/> are null
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key and mathcing rule.
            </summary>
            <param name="source">The query</param>
            <param name="attribute">The attribute by which to order.</param>
            <typeparam name="TSource">The type to query against</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> or <paramref name="attribute"/> are null
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key and mathcing rule.
            </summary>
            <param name="source">The query</param>
            <param name="attribute">The attrbiute by which to sort.</param>
            <typeparam name="TSource">The type to query against</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> or <paramref name="attribute"/> are null
            </exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.ToPage``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Immediately pages the query into a <see cref="T:LinqToLdap.Collections.ILdapPage`1"/>.
            </summary>
            <typeparam name="TSource">The type to query against</typeparam>
            <param name="source">The query</param>
            <param name="pageSize">The size of the page</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="pageSize"/> is less than one.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.ToPage``1(System.Linq.IQueryable{``0},System.Int32,System.Byte[])">
            <summary>
            Immediately pages the query into a <see cref="T:LinqToLdap.Collections.ILdapPage`1"/>.
            </summary>
            <typeparam name="TSource">The type to query against</typeparam>
            <param name="source">The query</param>
            <param name="pageSize">The size of the page</param>
            <param name="nextPage">The cookie of the next page</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="pageSize"/> is less than one.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="nextPage"/> is null.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.ToPage``1(System.Linq.IQueryable{``0},System.Int32,System.Byte[],System.String)">
            <summary>
            Immediately pages the query into a <see cref="T:LinqToLdap.Collections.ILdapPage`1"/>.
            </summary>
            <typeparam name="TSource">The type to query against</typeparam>
            <param name="source">The query</param>
            <param name="pageSize">The size of the page</param>
            <param name="nextPage">The cookie of the next page</param>
            <param name="filter">The filter used to build the previous page request.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="pageSize"/> is less than one.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="nextPage"/> is null.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.Select(System.Linq.IQueryable{LinqToLdap.Collections.IDirectoryAttributes},System.String[])">
            <summary>
            Performs a select projection for a dynamic query.
            </summary>
            <param name="source">The query.</param>
            <param name="attributes">The requested attributes.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> or <paramref name="attributes"/> is null.</exception>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.InPagesOf``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Pages through all the results and returns them in a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="source">The query</param>
            <param name="pageSize">The size of each page</param>
            <typeparam name="TSource">The type to query against</typeparam>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="pageSize"/> is not greater than 0</exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.ToList``1(System.Linq.IQueryable{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Linq.IQueryable`1"/> from which to create a <see cref="T:System.Collections.Generic.List`1"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> that contains elements from the input sequence.  
            If this method is used with LINQ to LDAP then an <see cref="T:LinqToLdap.Collections.LdapPage`1"/> may be created if <see cref="M:LinqToLdap.QueryableExtensions.WithControls``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{System.DirectoryServices.Protocols.DirectoryControl})"/> is used with a 
            <see cref="T:System.DirectoryServices.Protocols.PageResultRequestControl"/>.
            </returns>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.GetRequest``1(System.Linq.IQueryable{``0})">
            <summary>
            Builds the <see cref="T:System.DirectoryServices.Protocols.SearchRequest"/> without sending it to the server.
            </summary>
            <param name="source">The query.</param>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="source"/> is null.
            </exception>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryableExtensions.WithoutPaging``1(System.Linq.IQueryable{``0})">
            <summary>
            Will execute the query without paging any results.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The query.</param>
            <exception cref="T:System.DirectoryServices.Protocols.DirectoryOperationException">Potentially thrown if the result set exceeds the size defined by the server.</exception>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.QueryCommands.IQueryCommand">
            <summary>
            Interface for a command that executes a query against the directory.
            </summary>
        </member>
        <member name="M:LinqToLdap.QueryCommands.IQueryCommand.Execute(System.DirectoryServices.Protocols.DirectoryConnection,System.DirectoryServices.Protocols.SearchScope,System.Int32,System.Boolean,LinqToLdap.Logging.ILinqToLdapLogger,System.String)">
            <summary>
            Executes a query against the <paramref name="connection"/>.
            </summary>
            <param name="connection">Connection to use.</param>
            <param name="scope">Search depth.</param>
            <param name="pagingEnabled">Indicates if paging is enabled.  Defaults to true</param>
            <param name="log">Log for writing <see cref="T:System.DirectoryServices.Protocols.SearchRequest"/> information.</param>
            <param name="maxPageSize">The max server page size.  Defaults to 500</param>
            <param name="namingContext">DistinguishedName for the <see cref="T:System.DirectoryServices.Protocols.SearchRequest"/></param>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.QueryCommands.Options.IQueryCommandOptions">
            <summary>
            Options created to aid in query executions
            </summary>
        </member>
        <member name="M:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.GetEnumerator(System.DirectoryServices.Protocols.SearchResultEntryCollection)">
            <summary>
            Gets an enumerator that can handle the <paramref name="results"/>
            </summary>
            <param name="results">Results to iterate.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.GetEnumerator(System.Collections.Generic.List{System.DirectoryServices.Protocols.SearchResultEntry})">
            <summary>
            Gets an enumerator that can handle the <paramref name="results"/>
            </summary>
            <param name="results">Results to iterate.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.GetEnumerator">
            <summary>
            Gets a default enumerator with no results to enumerate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.GetTransformer">
            <summary>
            Gets a <see cref="T:LinqToLdap.Transformers.IResultTransformer"/> that can transform a <see cref="T:System.DirectoryServices.Protocols.SearchResultEntry"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.GetEnumeratorReturnType">
            <summary>
            Gets the return type from GetEnumerator.
            </summary>
        </member>
        <member name="P:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.AttributesToLoad">
            <summary>
            Attributes to load for the query
            </summary>
        </member>
        <member name="P:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.Filter">
            <summary>
            Query filter
            </summary>
        </member>
        <member name="P:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.PageSize">
            <summary>
            Indicates the page size to use if no paging options have been specified.
            </summary>
        </member>
        <member name="P:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.TakeSize">
            <summary>
            Indicates the max number of records to retrieve
            </summary>
        </member>
        <member name="P:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.WithoutPaging">
            <summary>
            Indicates if the current query should execute without paging.
            </summary>
        </member>
        <member name="P:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.PagingOptions">
            <summary>
            Gets the paging information for a query.  Null if there is no paging information.
            </summary>
        </member>
        <member name="P:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.SortingOptions">
            <summary>
            Gets the sorting information for a query.  Null if there is no sorting information.
            </summary>
        </member>
        <member name="P:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.Controls">
            <summary>
             Gets controls to be used with the query.
            </summary>
        </member>
        <member name="P:LinqToLdap.QueryCommands.Options.IQueryCommandOptions.YieldNoResults">
            <summary>
            Indicates if a locally evaluated condition results in no filter being created.
            </summary>
        </member>
        <member name="T:LinqToLdap.QueryCommands.Options.ISortingOptions">
            <summary>
            Interface the contains <see cref="T:System.DirectoryServices.Protocols.SortKey"/>s for a query.
            </summary>
        </member>
        <member name="P:LinqToLdap.QueryCommands.Options.ISortingOptions.Keys">
            <summary>
            The keys containing sort information.
            </summary>
        </member>
        <member name="T:LinqToLdap.QueryCommands.Options.IPagingOptions">
            <summary>
            Interface for paging options from a Query.
            </summary>
        </member>
        <member name="P:LinqToLdap.QueryCommands.Options.IPagingOptions.NextPage">
            <summary>
            The next page.
            </summary>
        </member>
        <member name="P:LinqToLdap.QueryCommands.Options.IPagingOptions.PageSize">
            <summary>
            The size of the page.
            </summary>
        </member>
        <member name="T:LinqToLdap.QueryCommands.QueryCommandType">
            <summary>
            Indicates the type of command to create.
            </summary>
        </member>
        <member name="F:LinqToLdap.QueryCommands.QueryCommandType.StandardCommand">
            <summary>
            Represents a standard command
            </summary>
        </member>
        <member name="F:LinqToLdap.QueryCommands.QueryCommandType.AnyCommand">
            <summary>
            Any command
            </summary>
        </member>
        <member name="F:LinqToLdap.QueryCommands.QueryCommandType.FirstOrDefaultCommand">
            <summary>
            First / FirstOrDefault command
            </summary>
        </member>
        <member name="F:LinqToLdap.QueryCommands.QueryCommandType.SingleCommand">
            <summary>
            Single command
            </summary>
        </member>
        <member name="F:LinqToLdap.QueryCommands.QueryCommandType.SingleOrDefaultCommand">
            <summary>
            SingleOrDefault command
            </summary>
        </member>
        <member name="F:LinqToLdap.QueryCommands.QueryCommandType.CountCommand">
            <summary>
            Count command
            </summary>
        </member>
        <member name="F:LinqToLdap.QueryCommands.QueryCommandType.GetRequestCommand">
            <summary>
            GetRequest command
            </summary>
        </member>
        <member name="T:LinqToLdap.Collections.ReadOnlyDictionary`2">
            <summary>
            A read only generic dictionary.  Taken from http://www.blackwasp.co.uk/ReadOnlyDictionary.aspx
            </summary>
        </member>
        <member name="M:LinqToLdap.Collections.ReadOnlyDictionary`2.#ctor">
            <summary>
             Creates an empty read only dictionary
            </summary>
        </member>
        <member name="M:LinqToLdap.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Creates a read only dictionary from an existing enumerable <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:LinqToLdap.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:LinqToLdap.Collections.ReadOnlyDictionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:LinqToLdap.Collections.ReadOnlyDictionary`2"/>.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">
            When this method returns, contains the value associated with the specified key, 
            if the key is found; otherwise, the default value for the type of the value parameter. 
            This parameter is passed uninitialized.
            </param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.ReadOnlyDictionary`2.Clear">
            <summary>
            Dictionary is read only
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown because the dictionary is read only
            </exception>
        </member>
        <member name="M:LinqToLdap.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="item">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.IDictionary`2"/> to an array, 
            starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements 
            copied from <see cref="T:System.Collections.Generic.IDictionary`2"/>. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:LinqToLdap.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.Collections.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:LinqToLdap.Collections.ReadOnlyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.ReadOnlyDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:LinqToLdap.Collections.ReadOnlyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
             Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
        </member>
        <member name="P:LinqToLdap.Collections.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements in the dictionary.
            </summary>
        </member>
        <member name="P:LinqToLdap.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Return true
            </summary>
        </member>
        <member name="T:LinqToLdap.TestSupport.MockQuery`1">
            <summary>
            Mock implementation of <see cref="T:System.Linq.IOrderedQueryable`1"/> for unit testing.
            </summary>
            <typeparam name="T">Type of the query</typeparam>
        </member>
        <member name="M:LinqToLdap.TestSupport.MockQuery`1.#ctor(System.Collections.Generic.IList{System.Object})">
            <summary>
            Constructor for <see cref="T:LinqToLdap.TestSupport.MockQuery`1"/>.
            </summary>
            <param name="resultsToReturn">The results to return in order of execution. Supports multiple result types for query reuse.  Pass null if you don't care about the results.</param>
        </member>
        <member name="M:LinqToLdap.TestSupport.MockQuery`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:LinqToLdap.TestSupport.MockQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:LinqToLdap.TestSupport.MockQuery`1.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="P:LinqToLdap.TestSupport.MockQuery`1.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
            </returns>
        </member>
        <member name="P:LinqToLdap.TestSupport.MockQuery`1.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <returns>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source. This is the same instance as <see cref="P:LinqToLdap.TestSupport.MockQuery`1.MockProvider"/>.
            </returns>
        </member>
        <member name="P:LinqToLdap.TestSupport.MockQuery`1.MockProvider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <returns>
            The <see cref="T:System.Linq.MockQueryProvider"/> that is associated with this data source. This is the same instance as <see cref="P:LinqToLdap.TestSupport.MockQuery`1.Provider"/>.
            </returns>
        </member>
        <member name="T:LinqToLdap.TestSupport.MockQueryProvider">
            <summary>
            A mock <see cref="T:System.Linq.IQueryProvider"/>.
            </summary>
        </member>
        <member name="M:LinqToLdap.TestSupport.MockQueryProvider.#ctor(System.Collections.Generic.IList{System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="resultsToReturn">The results to return with the query is executed.</param>
        </member>
        <member name="M:LinqToLdap.TestSupport.MockQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new query with the expression and sets <see cref="P:LinqToLdap.TestSupport.MockQueryProvider.CurrentExpression"/> equal to <paramref name="expression"/>.
            </summary>
            <param name="expression">The expression</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.TestSupport.MockQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new query with the expression and sets <see cref="P:LinqToLdap.TestSupport.MockQueryProvider.CurrentExpression"/> equal to <paramref name="expression"/>.
            </summary>
            <typeparam name="TElement">The return type of the query.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.TestSupport.MockQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Sets <see cref="P:LinqToLdap.TestSupport.MockQueryProvider.CurrentExpression"/> equal to <paramref name="expression"/> and adds it to <see cref="P:LinqToLdap.TestSupport.MockQueryProvider.ExecutedExpressions"/>. Returns the a result from <see cref="P:LinqToLdap.TestSupport.MockQueryProvider.ResultsToReturn"/> based on the number of execution calls that have occurred.
            </summary>
            <param name="expression">The expression</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.TestSupport.MockQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Sets <see cref="P:LinqToLdap.TestSupport.MockQueryProvider.CurrentExpression"/> equal to <paramref name="expression"/> and adds it to <see cref="P:LinqToLdap.TestSupport.MockQueryProvider.ExecutedExpressions"/>. Returns the a result from <see cref="P:LinqToLdap.TestSupport.MockQueryProvider.ResultsToReturn"/> based on the number of execution calls that have occurred.
            </summary>
            <typeparam name="TResult">The type of the result</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="P:LinqToLdap.TestSupport.MockQueryProvider.ResultsToReturn">
            <summary>
            The results to return when the provider is executed.
            </summary>
        </member>
        <member name="P:LinqToLdap.TestSupport.MockQueryProvider.CurrentExpression">
            <summary>
            The last expression passed into <see cref="M:LinqToLdap.TestSupport.MockQueryProvider.CreateQuery(System.Linq.Expressions.Expression)"/>, <see cref="M:LinqToLdap.TestSupport.MockQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)"/>, <see cref="M:LinqToLdap.TestSupport.MockQueryProvider.Execute(System.Linq.Expressions.Expression)"/>, or <see cref="M:LinqToLdap.TestSupport.MockQueryProvider.Execute``1(System.Linq.Expressions.Expression)"/>.
            </summary>
        </member>
        <member name="P:LinqToLdap.TestSupport.MockQueryProvider.ExecutedExpressions">
            <summary>
            All expressions executed by this provider. The most recent expression is at the end of the list.
            </summary>
        </member>
        <member name="T:LinqToLdap.Transformers.IResultTransformer">
            <summary>
            Interface for transforming query results
            </summary>
        </member>
        <member name="M:LinqToLdap.Transformers.IResultTransformer.Transform(System.DirectoryServices.Protocols.SearchResultEntry)">
            <summary>
            Transform the <paramref name="entry"/>
            </summary>
            <param name="entry">The entry to transform</param>
            <returns></returns>
        </member>
        <member name="M:LinqToLdap.Transformers.IResultTransformer.Default">
            <summary>
            Get the default value of the transform.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LinqToLdap.Visitors.ExpressionVisitor">
            <summary>
            Provides virtual methods that can be used by subclasses to parse an expression tree.
            </summary>
            <remarks>
            Pulled from http://blogs.msdn.com/b/mattwar/archive/2008/11/18/linq-links.aspx
            This class actually already exists in the System.Core assembly...as an public class.
            I can only speculate as to why it is public, but it is obviously much too dangerous
            for anyone outside of Microsoft to be using...
            </remarks>
        </member>
        <member name="T:LinqToLdap.Visitors.Evaluator">
            <summary>
            Pulled from http://blogs.msdn.com/b/mattwar/archive/2008/11/18/linq-links.aspx
            </summary>
        </member>
        <member name="M:LinqToLdap.Visitors.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:LinqToLdap.Visitors.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="T:LinqToLdap.Visitors.Evaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="T:LinqToLdap.Visitors.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
    </members>
</doc>
